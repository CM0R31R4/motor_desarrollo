delete from isys_querys_tx where llave='3005';

insert into isys_querys_tx values ('3005',10,1,1,'SELECT proc_parser_traductor_ws_3005(''$$__XMLCOMPLETO__$$'') as __XML__',0,0,0,1,1,-1,0);

insert into isys_querys_tx values ('3005',30,1,1,'SELECT proc_parser_respuesta_ws_3005(''$$__XMLCOMPLETO__$$'') as __XML__',0,0,0,1,1,-1,0);

--MASVIDA (Con GET_MULTIPLE)
--insert into isys_querys_tx values ('3005',88,88,1,'$$SQLINPUT$$',0,0,0,6,1,30,30);	--GET_MULTIPLE
--insert into isys_querys_tx values ('3005',88,88,1,'$$SQLINPUT$$',0,0,0,1,1,30,30);	--GET_RECORD

--CME (Call SP)
insert into isys_querys_tx values ('3005',500,1,8,'Flujo CME Contenidas',3006,0,0,1,1,30,30);

--Parsea el WS para identificar la transacciones entrante
CREATE OR REPLACE FUNCTION proc_parser_traductor_ws_3005(varchar)
returns varchar as
$$
declare
        xml1    	alias for $1;
        xml2    	varchar;
	stSec		define_secuencia_ws%ROWTYPE;
	stData		respuestas_soap%ROWTYPE;
	tipo_tx1	varchar;
	input1	 	varchar;
	cod_motor1	varchar;
        id_fin1 	integer;
	xml_error1	varchar;
	query1		varchar;
	puerto1		varchar;
	
begin
	xml2:=xml1;
	xml2	:=put_campo(xml2,'__SECUENCIAOK__','0');
	--xml2	:=put_campo(xml2,'ESTADO_TX','');
	xml2	:=put_campo(xml2,'CODIGO_RESP','');
	xml2	:=put_campo(xml2,'MENSAJE_RESP','');
	xml2	:=put_campo(xml2,'FECHA_IN_TX',clock_timestamp()::varchar);
	
	--xml2:=logapp(xml2,'__COLA_MOTOR__='||get_campo('__COLA_MOTOR__',xml2));
        --xml2:=logapp(xml2,'__ID_DTE__='||get_campo('__ID_DTE__',xml2));
        --Preguntamos si viene el wsdl
        if (get_campo('REQUEST_METHOD',xml2)='GET' and
            (strpos(get_campo('REQUEST_URI',xml2),'wsdl')>0 or strpos(get_campo('REQUEST_URI',xml2),'xsd')>0)) then
                xml2    :=put_campo(xml2,'__SECUENCIAOK__','0');
                return proc_wsdl_3002(xml2);
        end if;

	--Decode del INPUT
	xml2:=put_campo(xml2,'INPUT',decode(get_campo('INPUT',xml2),'hex')::varchar);
	input1	:=get_campo('INPUT',xml2);
	
	--Validamos si el XML entrante es un documento xml valido
	xml2 	:=valida_documento_xml(xml2);
	if length(get_campo('__XML_STD__',xml2))=0 then
		xml2:=put_campo(xml2,'STATUS_HTTP','400 Xml Invalido');
		xml2:=put_campo(xml2,'ERRORCOD','400');
                xml2:=put_campo(xml2,'ERRORMSG','Xml Invalido');
		xml2:=logapp(xml2,'400 Xml Invalido, no hay respuesta');
                return xml2;
	end if;

	--Busca el tipo_tx en el XML Input. tag1:='<ws:' o tag1:='<ns1:'
	xml2:=busca_tx_data_xml(xml2);
	
	tipo_tx1:=get_campo('TX_WS',xml2);	
	cod_motor1:=nextval('correlativo_motor')::varchar;
        xml2:=put_campo(xml2,'CODIGO_MOTOR',cod_motor1);

	--Lee Datos de la respuesta
        select * into stData from respuestas_soap where tipo_tx=tipo_tx1;
        if not found then
                xml2:=put_campo(xml2,'STATUS_HTTP','500 Falla Tx1');
                xml2:=logapp(xml2,'No existe respuesta_soap, 500 Falla Tx='||tipo_tx1::varchar);
                --En caso de error, igual respondo un con un XML
                xml2:=put_campo(xml2,'RESPUESTA',stData.xml_error);
                --Proceso la respuesta con los datos en el XML
                xml2:=respuesta_xml(xml2);
                xml2:=responde_http_scgi(xml2);
                return xml2;
        end if;
        --Saca formatos de respuestas genericas
        xml2:=put_campo(xml2,'XML_ERROR',stData.xml_error);
        xml2:=put_campo(xml2,'XML_OK',stData.respuesta);

	--Parsea los datos del XML entrante, recibe un xml como parametro tag_busqueda='<ws:datosprest>'
	xml2:=parser_xml(xml2,get_campo('TAG_BUSQUEDA',xml2));

	--Input Financiador CtaMed()
	if is_number(get_campo('CTACODFINANCIADOR',xml2)) then
		id_fin1	:=get_campo('CTACODFINANCIADOR',xml2)::integer;
	
	--Input Financiador CtaMed (Protocolo Operatorio)
	elsif is_number(get_campo('PROCODFINANCIADOR',xml2)) then
		id_fin1	:=get_campo('PROCODFINANCIADOR',xml2)::integer;
	
	--Input Financiador CtasMed (Anamnesis)
	elsif is_number(get_campo('ANAMCODFINANCIADOR',xml2)) then
		id_fin1	:=get_campo('ANAMCODFINANCIADOR',xml2)::integer;
	
	--Input Financiador CtaMed (Epicrisis)
	elsif is_number(get_campo('EPICODFINANCIADOR',xml2)) then
		id_fin1	:=get_campo('EPICODFINANCIADOR',xml2)::integer;
	
	else
		xml2:=put_campo(xml2,'STATUS_HTTP','400 Financiador No Encontrado');
		xml2:=put_campo(xml2,'ERRORCOD','400');
                xml2:=put_campo(xml2,'ERRORMSG','Financiador No Encontrado');
		xml2:=logapp(xml2,'Financiador No Encontrado');

                --En caso de error, igual respondo un con un XML
                xml2:=put_campo(xml2,'RESPUESTA',get_campo('XML_ERROR',xml2));

                --Proceso la respuesta con los datos en el XML
                xml2:=respuesta_xml(xml2);
                xml2:=responde_http_scgi(xml2);

                return xml2;
	end if;
	
	--Para guardar el Id del Financiador en la Base	
	xml2:=put_campo(xml2,'ID_FIN',id_fin1::varchar);

	--Si viene el idxTx. Usa ese valor como codigo de la ctamedica
	if (length(get_campo('IDXTX',xml2))::integer > 0) then
		xml2:=put_campo(xml2,'COD_CME',get_campo('IDXTX',xml2));
	else 
		xml2:=put_campo(xml2,'COD_CME','0'::varchar);
	end if;

	--Obtengo el secuenciaOK y la funcion Input del financiador. Por tipo de trx. 
	select * into stSec from define_secuencia_ws where tipo_tx=tipo_tx1 and financiador = id_fin1;
	if not found then
		xml2:=put_campo(xml2,'ERROR_LOG','No existe transaccion = '||tipo_tx1||' financiador = '||id_fin1::varchar);
		xml2:=put_campo(xml2,'STATUS_HTTP','400 Peticion Incorrecta');
		xml2:=put_campo(xml2,'ERRORCOD','400');
		xml2:=put_campo(xml2,'ERRORMSG','Servicio '||tipo_tx1||'No Habilitado');
                xml2:=logapp(xml2,'No existe transaccion = '||tipo_tx1||' financiador = '||id_fin1::varchar);

                --Proceso la respuesta con los datos en el XML
                xml2:=put_campo(xml2,'RESPUESTA',get_campo('XML_ERROR',xml2));
                xml2:=respuesta_xml(xml2);
                xml2:=responde_http_scgi(xml2);

                return xml2;
	end if;

	--No necesito la Funcion Respuesta ya que contiene primero
	--xml2:=put_campo(xml2,'FUNCION_OUTPUT',stSec.funcion_output);
	xml2:=put_campo(xml2,'FINANCIADOR',stSec.descripcion);

	--EJECUTA FUNCION INPUT
	xml2:=logapp(xml2,'Ejecuta='||stSec.funcion_input);
	if length(stSec.funcion_input)>0 then 
		--xml2 := put_campo(xml2,'__FUNCION__',get_campo('__FUNCION__',xml2) || '-' || stSec.funcion_input);
		EXECUTE 'SELECT ' || stSec.funcion_input || '(' || chr(39) || xml2 || chr(39) || ')' into xml2;
	end if;

	--TODO:Si es finTx, debe leer un registro 1 a 1, y enviar el detalle a Financiador.  
	
 
	--Setea la secuencia en la funcion fintx_ctamed
	if (stSec.tipo_tx<>'fintx') then 
		--Llama a la Api, segun Secuencia definida en define_secuencia_ws
		xml2:=put_campo(xml2,'__SECUENCIAOK__',stSec.secuencia::varchar);
	end if;

	--Guarda el registro en la tabla tx_ctacte
	xml2:=ctamed_registra_tx(xml2);
	
	--Como ejecuta Contencion, con TRX = fintx se procesan las CME.
	--No levante funcion de respuesta. 
	--xml2:=put_campo(xml2,'FUNCION_OUTPUT','');
	xml2:=put_campo(xml2,'__XML_STD__','LIMPIADO_3005_IN');

	return xml2;	
end;
$$
LANGUAGE plpgsql;

--Parsea el WS para identificar la transacciones entrante
CREATE OR REPLACE FUNCTION proc_parser_respuesta_ws_3005(varchar)
returns varchar as
$$
declare
        xml1    	alias for $1;
	stData		respuestas_soap%ROWTYPE;
        xml2   		varchar;
	tipo_tx1	varchar;
	func_out1	varchar;
        id_fin1 	integer;
	fec_in1         varchar;
        fec_out1        varchar;
        timeout1        varchar;
        seg1            varchar;
begin
	xml2:=xml1;
	xml2	:=put_campo(xml2,'__SECUENCIAOK__','0');
	xml2	:=put_campo(xml2,'SQLINPUT','');
	xml2	:=put_campo(xml2,'RQT_XML','CLEAR');
	--xml2	:=put_campo(xml2,'ESTADO_TX','EN_PROCESO');
	--xml2	:=put_campo(xml2,'CODIGO_RESP','');
	--xml2	:=put_campo(xml2,'MENSAJE_RESP','');
	xml2	:=put_campo(xml2,'FECHA_OUT_TX',clock_timestamp()::varchar);
	
	tipo_tx1:=get_campo('TX_WS',xml2); --Bencertif
        id_fin1:=get_campo('ID_FIN',xml2)::integer;
	
	--func_out1:=get_campo('FUNCION_OUTPUT',xml2);
	xml2:=logapp(xml2,'F_3005 Ejecuta_Funcion_Out_CME ='||func_out1);
	
       	if length(func_out1)>0 then
       		--xml2 := put_campo(xml2,'__FUNCION__',get_campo('__FUNCION__',xml2) || '-' || func_out1);
               	EXECUTE 'SELECT ' || func_out1 || '(' || chr(39) || xml2 || chr(39) || ')' into xml2;
		xml2:=logapp(xml2,'F_3005 Respuesta="'||get_campo('MENSAJE_RESP',xml2)||'" Codigo='||get_campo('CODIGO_RESP',xml2));
       	end if;
	fec_in1 :=get_campo('FECHA_IN_TX',xml2);
        fec_out1:=get_campo('FECHA_OUT_TX',xml2);

	timeout1:= AVG(fec_out1::time - fec_in1::time);
        seg1:=split_part(timeout1,':',3);
	xml2:=put_campo(xml2,'TIMEOUT_SEG',seg1);
        xml2:=logapp(xml2,'F_Timeout='||timeout1::varchar);

	-- TIMEOUT
        if (strpos(get_campo('__STS_ERROR_SOCKET__',xml2),'SOCKET_NO_RESPONSE')>0) then  --SOCKET_NO_RESPONSE_BD  
		xml2:=logapp(xml2,'500 Error Conexion Financiador ');
                xml2:=put_campo(xml2,'STATUS_HTTP','500 Error Conexion Financiador ');
                xml2:=put_campo(xml2,'ERRORCOD','500');
                --xml2:=put_campo(xml2,'ERRORMSG','Financiador TimeOut');

                --Si el Tiempo (FIN - INICIO) > 16. Es un Error de TIMEOUT.
                if (seg1) > '15' then
                        xml2:=put_campo(xml2,'ERRORMSG','Error de Timeout con Financiador');
                        xml2:=put_campo(xml2,'MENSAJE_RESP','Financiador_TimeOut');
                        xml2:=logapp(xml2,'Error de Timeout con Financiador');
                else
                        xml2:=put_campo(xml2,'ERRORMSG','Error de Comunicacion con Financiador');
                        xml2:=put_campo(xml2,'MENSAJE_RESP','Financiador_Offline');
                        xml2:=logapp(xml2,'Error de Comunicacion con Financiador');
                end if;

                --Registro la falla de conexion
                xml2    :=put_campo(xml2,'CODIGO_RESP','2');
                xml2    :=put_campo(xml2,'ESTADO_TX','FALLA_API');

                --Busca el xml de error
                xml2:=put_campo(xml2,'RESPUESTA',get_campo('XML_ERROR',xml2));
                xml2:=respuesta_xml(xml2);
                xml2:=responde_http_scgi(xml2);

                --Guardo este error, para shell control servicios
                xml2:=b3_update_tx(xml2);
        end if;


	-- En caso de Error. Todas las Isapres deben tener API_CODRESPUESTA
	if (get_campo('API_CODRESPUESTA',xml2) = '2') then
	        --if strpos(get_campo('__STS_ERROR_SOCKET__',xml2),'FALLA_CONEXION')>0 then 
           	--strpos(get_campo('__STS_ERROR_SOCKET__',xml2),'FALLA_CONEXION_BD')>0 or	--FALLA_CONEXION_BD 
        	
		xml2:=put_campo(xml2,'STATUS_HTTP','500 Error Service');
        	--Responde el Error del Financiador
                xml2:=put_campo(xml2,'ERRORCOD',get_campo('API_ERROR',xml2));
                xml2:=put_campo(xml2,'ERRORMSG',get_campo('API_DESCRIPCION_ERROR',xml2));
                xml2:=logapp(xml2,'Error: '||get_campo('API_DESCRIPCION_ERROR',xml2));

                --Registro la falla de conexion
                xml2    :=put_campo(xml2,'CODIGO_RESP','2');
                xml2    :=put_campo(xml2,'ESTADO_TX','FALLA_API');
                xml2    :=put_campo(xml2,'MENSAJE_RESP','Error_Service');
                --xml2:=put_campo(xml2,'MENSAJE_RESP',get_campo('API_DESCRIPCION_ERROR',xml2));

                --Busca el xml de error
                xml2:=put_campo(xml2,'RESPUESTA',get_campo('XML_ERROR',xml2));
                xml2:=respuesta_xml(xml2);
                xml2:=responde_http_scgi(xml2);

                --Guardo este error, para shell control servicios
                xml2:=b3_update_tx(xml2);

                --xml2:=put_campo(xml2,'ERROR_LOG','Falla:Conexion_API = '||tipo_tx1);
                xml2:=logapp(xml2,'Falla:Api_codrespuesta = '||tipo_tx1);
                return xml2;
	end if;

	--Si no contesta porque esta caida el API...
        if (strpos(get_campo('__STS_ERROR_SOCKET__',xml2),'FALLA_CONEXION')>0) then
                xml2:=put_campo(xml2,'STATUS_HTTP','500 Error Service');
                --Responde el Error del Financiador
                xml2:=put_campo(xml2,'ERRORCOD','2');
                xml2:=put_campo(xml2,'ERRORMSG','Reintente por Favor');

                --Registro la falla de conexion
                xml2    :=put_campo(xml2,'CODIGO_RESP','2');
                xml2    :=put_campo(xml2,'ESTADO_TX','FALLA_CONEXION_API');
                xml2:=put_campo(xml2,'MENSAJE_RESP','Falla Conexion con el API');

                --Busca el xml de error
                xml2:=put_campo(xml2,'RESPUESTA',get_campo('XML_ERROR',xml2));
                xml2:=respuesta_xml(xml2);
                xml2:=responde_http_scgi(xml2);

                --Guardo este error, para shell control servicios
                xml2:=b3_update_tx(xml2);

                xml2:=logapp(xml2,'Falla:Conexion con el Api Tx='||tipo_tx1);
                return xml2;
        end if;

	/*
	--Si no hay un Xml Respuesta en la tabla respuestas_soap, de tipo_tx
	select * into stData from respuestas_soap where tipo_tx=tipo_tx1;
	if not found then
		xml2:=put_campo(xml2,'STATUS_HTTP','500 Falla Tx');
		xml2:=put_campo(xml2,'ERRORCOD','500');
                xml2:=put_campo(xml2,'ERRORMSG','Falla Servicio Respuesta');
                
		--Registro la falla de conexion
                xml2    :=put_campo(xml2,'CODIGO_RESP','2');
                xml2    :=put_campo(xml2,'ESTADO_TX','RECHAZADO');
                xml2    :=put_campo(xml2,'MENSAJE_RESP','Falla_SOAP');
		
		xml2:=put_campo(xml2,'RESPUESTA',stData.xml_error);
                --Proceso la respuesta con los datos en el XML
                xml2:=respuesta_xml(xml2);
                xml2:=responde_http(xml2);

                --Guardo este error, para shell control servicios
                xml2:=ctamed_update_tx(xml2);

                xml2:=put_campo(xml2,'ERROR_LOG','Falla:Respuesta_SOAP = '||tipo_tx1);
                return xml2;
	end if;*/

	--Si API_CODRESPUESTA=1
	--Genera Respuesta SOAP OK.
	xml2:=put_campo(xml2,'RESPUESTA',get_campo('XML_OK',xml2));
	--Proceso la respuesta con los datos en el XML
        xml2:=respuesta_xml(xml2);
        xml2:=put_campo(xml2,'STATUS_HTTP','200 OK');
        xml2:=responde_http_scgi(xml2);
        --xml2:=logapp(xml2,'Respuesta OK 200 ='||get_campo('RESPUESTA',xml2));

	--Si todo fue OK. Updateo el registro
	if (tipo_tx1 = 'iniciotx') or (tipo_tx1 = 'fintx') or (tipo_tx1 = 'anulatx') then
		--and financiador = 'CTAMED') then
		--raise notice 'JCC_Update_CtaMedica tipo_tx1=%',tipo_tx1;	
		xml2:=put_campo(xml2,'ESTADO_TX','TERMINADO_OK');
        	xml2:=put_campo(xml2,'CODIGO_RESP','1');
        	xml2:=put_campo(xml2,'MENSAJE_RESP','Trx_Signal_OK');
		--Para el Update de la CME
		xml2:=put_campo(xml2,'ERR','N');
	end if;

        xml2:=ctamed_update_tx(xml2);

	xml2:=logapp(xml2,'Resp_CME tipo_tx1='||tipo_tx1||' - MsjeResp='||get_campo('MENSAJE_RESP',xml2)||' - CodResp='||get_campo('CODIGO_RESP',xml2)||' - CodMotor='||get_campo('CODIGO_MOTOR',xml2)||' - CodCme='||get_campo('COD_CME',xml2));

	return xml2;
end;
$$
LANGUAGE plpgsql;


REATE OR REPLACE FUNCTION iniciotx_ctamed (varchar)
returns varchar as
$$
declare
        xml1    alias for $1;
        xml2    varchar;
        cod_cme1	varchar;
begin
        xml2:=xml1;
        --xml2:=put_campo(xml2,'__SECUENCIAOK__','0');
        xml2:=put_campo(xml2,'ESTADO_TX','EN_PROCESO');
        xml2:=put_campo(xml2,'CODIGO_RESP','2');
        xml2:=put_campo(xml2,'MENSAJE_RESP','');

        --Sirve para registrar el valor en tabla.
        xml2:=put_campo(xml2,'CTANUMCTA',coalesce(nullif(get_campo('CTANUMCTA',xml2),''),'0'));

        --Este cod puede venir en tag IDXTX.
        cod_cme1:=get_campo('COD_CME',xml2);

        if (cod_cme1='0') then
                cod_cme1:=nextval('correlativo_ctamed')::varchar;

                --Necesario para el Update de tx_ctamed
                xml2:=put_campo(xml2,'COD_CME',cod_cme1);

                --Para respuesta del WS_SOAP
                xml2:=put_campo(xml2,'IDXTX',cod_cme1);
        else
                xml2:=put_campo(xml2,'COD_CME','0'::varchar);
        end if;
        /*--Si no viene.
        if motor_isnumber(cod_cme1)=0 then
                cod_cme1:=nextval('correlativo_ctamed')::varchar;
                --Necesario para el Update de tx_ctamed
                xml2:=put_campo(xml2,'COD_CME',cod_cme1);
        end if;*/
        --raise notice 'JCC_iniciotx_ctamed cod_cme1=%',cod_cme1;

        return xml2;
end;
$$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION fintx_ctamed(varchar)
returns varchar as
$$
declare
        xml1	alias for $1;
        xml2    varchar;
        stCme   tx_ctamed%ROWTYPE;
        stSec   define_secuencia_ws%ROWTYPE;
        campo   record;

        id_fin1         varchar;
        cod_cme1        varchar;
        i       integer =1;
        cuenta1 integer =0;

begin
        xml2:=xml1;
        xml2:=put_campo(xml2,'__SECUENCIAOK__','30');
        xml2:=put_campo(xml2,'CTANUMCTA',coalesce(nullif(get_campo('CTANUMCTA',xml2),''),'0'));

        id_fin1:=get_campo('ID_FIN',xml2);
        cod_cme1:=get_campo('COD_CME',xml2);

        --Cuenta el total de CME registadas por cod_cme.
        select count(*) into cuenta1 from tx_ctamed WHERE cod_fin=id_fin1::integer and cod_ctamed=cod_cme1::integer and estado='CONTENIDA' and length(sp_exec)>0;
        --raise notice 'JCC_TotContenidas1 =%',cuenta1;
        if cuenta1 = 0 then
                xml2:=put_campo(xml2,'ERR','S');
                xml2:=put_campo(xml2,'GLOSA','CME idxTx='||get_campo('COD_CME',xml2)||'.Sin Registros');
                xml2:=logapp(xml2,'Glosa:CME idxTx='||get_campo('COD_CME',xml2)||'.Sin Registros');
                --Vuelve al 8081 con este error
                xml2:=put_campo(xml2,'__SECUENCIAOK__','30');
                return xml2;
        end if;
        --Si hay trx CME. Abro una conexion persistente al financiador
        --xml2:=put_campo(xml2,'__CONTROL_BD_PERSISTENTE__','OPEN');

        --Saco los SP que debo ejecutar
        for campo in SELECT * FROM tx_ctamed WHERE cod_fin=id_fin1::integer and cod_ctamed=cod_cme1::integer and estado='CONTENIDA' and length(sp_exec)>0 order by fecha_in_tx asc limit1;
                ORDER BY fecha_in_tx ASC LOOP
                --raise notice 'JCC_SP-Request tx_cme=% ',campo.tipo_tx;
                xml2:=put_campo(xml2,'COD_MOTOR_ORIG_'||i::varchar,campo.codigo_motor::varchar);
                xml2:=put_campo(xml2,'TX_CME_'||i::varchar,campo.tipo_tx);
                xml2:=put_campo(xml2,'SP_REQ_'||i::varchar,campo.sp_exec);

                /***
                Podria guardar la funcion_out en tx_ctamed.
                Asi CONTENGO solo lo tenga funcion_output x cada CME.
                y tengo que volver a leer de esta tabla.
                ***/

                --Ejecuta la funcion parseadora de respuesta por cada servicio enviado a la Isapre
                select * into stSec from define_secuencia_ws where tipo_tx=campo.tipo_tx and financiador = id_fin1::integer;
                --raise notice 'JCC_stSec.funcion_output =% ',stSec.funcion_output;
                xml2:=put_campo(xml2,'FUNC_SALIDA_'||i::varchar,stSec.funcion_output);
                --Incremente para el sgte registro.
                i:=i+1;

                --Va al flujo 8085
                --xml2:=put_campo(xml2,'__SECUENCIAOK__','500');
        END LOOP;
        --Cierra conexion
        --xml2:=put_campo(xml2,'__CONTROL_BD_PERSISTENTE__','CLOSE');

        --Total registros encontrados
        xml2:=put_campo(xml2,'TOTAL_CME',cuenta1::varchar);
        --Va al flujo 8085
        xml2:=put_campo(xml2,'CONTADOR_CME','1');
        xml2:=put_campo(xml2,'__SECUENCIAOK__','500');

        /*xml2:=put_campo(xml2,'ERR','N');
        xml2:=put_campo(xml2,'GLOSA','Fintx:Transacciones Informadas');*/

        return xml2;
end;
$$
LANGUAGE plpgsql;

