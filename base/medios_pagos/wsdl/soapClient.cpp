/* soapClient.cpp
   Generated by gSOAP 2.8.14 from Multicaja.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.14 2014-12-29 17:22:06 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__transaction(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__transaction *ns1__transaction_, ns1__transactionResponse *ns1__transactionResponse_)
{	struct __ns1__transaction soap_tmp___ns1__transaction;
	if (soap_endpoint == NULL)
		soap_endpoint = "https://200.111.44.187:10005/imed/ImedWebService";
	if (soap_action == NULL)
		soap_action = "http://www.multicaja.cl/imed/ImedWeb/transactionRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__transaction.ns1__transaction_ = ns1__transaction_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__transaction(soap, &soap_tmp___ns1__transaction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__transaction(soap, &soap_tmp___ns1__transaction, "-ns1:transaction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__transaction(soap, &soap_tmp___ns1__transaction, "-ns1:transaction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__transactionResponse_)
		return soap_closesock(soap);
	ns1__transactionResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__transactionResponse_->soap_get(soap, "ns1:transactionResponse", "ns1:transactionResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__echoTest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__echoTest *ns1__echoTest_, ns1__echoTestResponse *ns1__echoTestResponse_)
{	struct __ns1__echoTest soap_tmp___ns1__echoTest;
	if (soap_endpoint == NULL)
		soap_endpoint = "https://200.111.44.187:10005/imed/ImedWebService";
	if (soap_action == NULL)
		soap_action = "http://www.multicaja.cl/imed/ImedWeb/echoTestRequest";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__echoTest.ns1__echoTest_ = ns1__echoTest_;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__echoTest(soap, &soap_tmp___ns1__echoTest);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__echoTest(soap, &soap_tmp___ns1__echoTest, "-ns1:echoTest", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__echoTest(soap, &soap_tmp___ns1__echoTest, "-ns1:echoTest", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__echoTestResponse_)
		return soap_closesock(soap);
	ns1__echoTestResponse_->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__echoTestResponse_->soap_get(soap, "ns1:echoTestResponse", "ns1:echoTestResponse");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
