/* soapStub.h
   Generated by gSOAP 2.8.14 from Multicaja.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	""
#define SOAP_NAMESPACE_OF_ns1	"http://www.multicaja.cl/imed/"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20814
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__transaction
#define SOAP_TYPE_ns1__transaction (8)
/* ns1:transaction */
class SOAP_CMAC ns1__transaction
{
public:
	std::vector<class ns1__WebItem * >item;	/* optional element of type ns1:WebItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_ns1__transaction */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__transaction() { ns1__transaction::soap_default(NULL); }
	virtual ~ns1__transaction() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__WebItem
#define SOAP_TYPE_ns1__WebItem (9)
/* ns1:WebItem */
class SOAP_CMAC ns1__WebItem
{
public:
	std::string *name;	/* optional element of type xsd:string */
	std::string *value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_ns1__WebItem */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__WebItem() { ns1__WebItem::soap_default(NULL); }
	virtual ~ns1__WebItem() { }
};
#endif

#ifndef SOAP_TYPE_ns1__transactionResponse
#define SOAP_TYPE_ns1__transactionResponse (10)
/* ns1:transactionResponse */
class SOAP_CMAC ns1__transactionResponse
{
public:
	class ns1__TransactionResult *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:TransactionResult */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_ns1__transactionResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__transactionResponse() { ns1__transactionResponse::soap_default(NULL); }
	virtual ~ns1__transactionResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns1__TransactionResult
#define SOAP_TYPE_ns1__TransactionResult (11)
/* ns1:TransactionResult */
class SOAP_CMAC ns1__TransactionResult
{
public:
	std::vector<ns1__WebItem * >item;	/* optional element of type ns1:WebItem */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_ns1__TransactionResult */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__TransactionResult() { ns1__TransactionResult::soap_default(NULL); }
	virtual ~ns1__TransactionResult() { }
};
#endif

#ifndef SOAP_TYPE_ns1__echoTest
#define SOAP_TYPE_ns1__echoTest (12)
/* ns1:echoTest */
class SOAP_CMAC ns1__echoTest
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_ns1__echoTest */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__echoTest() { ns1__echoTest::soap_default(NULL); }
	virtual ~ns1__echoTest() { }
};
#endif

#ifndef SOAP_TYPE_ns1__echoTestResponse
#define SOAP_TYPE_ns1__echoTestResponse (13)
/* ns1:echoTestResponse */
class SOAP_CMAC ns1__echoTestResponse
{
public:
	time_t *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_ns1__echoTestResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__echoTestResponse() { ns1__echoTestResponse::soap_default(NULL); }
	virtual ~ns1__echoTestResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__transaction
#define SOAP_TYPE___ns1__transaction (25)
/* Operation wrapper: */
struct __ns1__transaction
{
public:
	ns1__transaction *ns1__transaction_;	/* optional element of type ns1:transaction */
public:
	int soap_type() const { return 25; } /* = unique id SOAP_TYPE___ns1__transaction */
};
#endif

#ifndef SOAP_TYPE___ns1__echoTest
#define SOAP_TYPE___ns1__echoTest (29)
/* Operation wrapper: */
struct __ns1__echoTest
{
public:
	ns1__echoTest *ns1__echoTest_;	/* optional element of type ns1:echoTest */
public:
	int soap_type() const { return 29; } /* = unique id SOAP_TYPE___ns1__echoTest */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (30)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 30; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (31)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 31; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (33)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 33; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (36)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 36; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (37)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 37; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__transaction(struct soap*, ns1__transaction *ns1__transaction_, ns1__transactionResponse *ns1__transactionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__echoTest(struct soap*, ns1__echoTest *ns1__echoTest_, ns1__echoTestResponse *ns1__echoTestResponse_);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__transaction(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__echoTest(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__transaction(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__transaction *ns1__transaction_, ns1__transactionResponse *ns1__transactionResponse_);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__echoTest(struct soap *soap, const char *soap_endpoint, const char *soap_action, ns1__echoTest *ns1__echoTest_, ns1__echoTestResponse *ns1__echoTestResponse_);

#endif

/* End of soapStub.h */
