/* soapC.cpp
   Generated by gSOAP 2.8.14 from cruzblanca.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.14 2015-02-18 20:47:17 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__ConciliacionResponse:
		return soap_in_PointerTo_ns1__ConciliacionResponse(soap, NULL, NULL, "ns1:ConciliacionResponse");
	case SOAP_TYPE_PointerTo_ns1__Conciliacion:
		return soap_in_PointerTo_ns1__Conciliacion(soap, NULL, NULL, "ns1:Conciliacion");
	case SOAP_TYPE_PointerTo_ns1__AnulacionResponse:
		return soap_in_PointerTo_ns1__AnulacionResponse(soap, NULL, NULL, "ns1:AnulacionResponse");
	case SOAP_TYPE_PointerTo_ns1__Anulacion:
		return soap_in_PointerTo_ns1__Anulacion(soap, NULL, NULL, "ns1:Anulacion");
	case SOAP_TYPE_PointerTo_ns1__ConfirmacionResponse:
		return soap_in_PointerTo_ns1__ConfirmacionResponse(soap, NULL, NULL, "ns1:ConfirmacionResponse");
	case SOAP_TYPE_PointerTo_ns1__Confirmacion:
		return soap_in_PointerTo_ns1__Confirmacion(soap, NULL, NULL, "ns1:Confirmacion");
	case SOAP_TYPE_PointerTo_ns1__CertificacionResponse:
		return soap_in_PointerTo_ns1__CertificacionResponse(soap, NULL, NULL, "ns1:CertificacionResponse");
	case SOAP_TYPE_PointerTo_ns1__Certificacion:
		return soap_in_PointerTo_ns1__Certificacion(soap, NULL, NULL, "ns1:Certificacion");
	case SOAP_TYPE_PointerTo_ns1__ConciliacionResponse_ConciliacionResult:
		return soap_in_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(soap, NULL, NULL, "ns1:ConciliacionResponse-ConciliacionResult");
	case SOAP_TYPE_PointerTo_ns1__AnulacionResponse_AnulacionResult:
		return soap_in_PointerTo_ns1__AnulacionResponse_AnulacionResult(soap, NULL, NULL, "ns1:AnulacionResponse-AnulacionResult");
	case SOAP_TYPE_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult:
		return soap_in_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(soap, NULL, NULL, "ns1:ConfirmacionResponse-ConfirmacionResult");
	case SOAP_TYPE_PointerTo_ns1__CertificacionResponse_CertificacionResult:
		return soap_in_PointerTo_ns1__CertificacionResponse_CertificacionResult(soap, NULL, NULL, "ns1:CertificacionResponse-CertificacionResult");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:ConciliacionResponse-ConciliacionResult"))
		{	*type = SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult;
			return soap_in__ns1__ConciliacionResponse_ConciliacionResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AnulacionResponse-AnulacionResult"))
		{	*type = SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult;
			return soap_in__ns1__AnulacionResponse_AnulacionResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ConfirmacionResponse-ConfirmacionResult"))
		{	*type = SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult;
			return soap_in__ns1__ConfirmacionResponse_ConfirmacionResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CertificacionResponse-CertificacionResult"))
		{	*type = SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult;
			return soap_in__ns1__CertificacionResponse_CertificacionResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ConciliacionResponse"))
		{	*type = SOAP_TYPE__ns1__ConciliacionResponse;
			return soap_in__ns1__ConciliacionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Conciliacion"))
		{	*type = SOAP_TYPE__ns1__Conciliacion;
			return soap_in__ns1__Conciliacion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AnulacionResponse"))
		{	*type = SOAP_TYPE__ns1__AnulacionResponse;
			return soap_in__ns1__AnulacionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Anulacion"))
		{	*type = SOAP_TYPE__ns1__Anulacion;
			return soap_in__ns1__Anulacion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ConfirmacionResponse"))
		{	*type = SOAP_TYPE__ns1__ConfirmacionResponse;
			return soap_in__ns1__ConfirmacionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Confirmacion"))
		{	*type = SOAP_TYPE__ns1__Confirmacion;
			return soap_in__ns1__Confirmacion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CertificacionResponse"))
		{	*type = SOAP_TYPE__ns1__CertificacionResponse;
			return soap_in__ns1__CertificacionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Certificacion"))
		{	*type = SOAP_TYPE__ns1__Certificacion;
			return soap_in__ns1__Certificacion(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult:
		return ((_ns1__ConciliacionResponse_ConciliacionResult *)ptr)->soap_out(soap, "ns1:ConciliacionResponse-ConciliacionResult", id, NULL);
	case SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult:
		return ((_ns1__AnulacionResponse_AnulacionResult *)ptr)->soap_out(soap, "ns1:AnulacionResponse-AnulacionResult", id, NULL);
	case SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult:
		return ((_ns1__ConfirmacionResponse_ConfirmacionResult *)ptr)->soap_out(soap, "ns1:ConfirmacionResponse-ConfirmacionResult", id, NULL);
	case SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult:
		return ((_ns1__CertificacionResponse_CertificacionResult *)ptr)->soap_out(soap, "ns1:CertificacionResponse-CertificacionResult", id, NULL);
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__ConciliacionResponse:
		return ((_ns1__ConciliacionResponse *)ptr)->soap_out(soap, "ns1:ConciliacionResponse", id, NULL);
	case SOAP_TYPE__ns1__Conciliacion:
		return ((_ns1__Conciliacion *)ptr)->soap_out(soap, "ns1:Conciliacion", id, NULL);
	case SOAP_TYPE__ns1__AnulacionResponse:
		return ((_ns1__AnulacionResponse *)ptr)->soap_out(soap, "ns1:AnulacionResponse", id, NULL);
	case SOAP_TYPE__ns1__Anulacion:
		return ((_ns1__Anulacion *)ptr)->soap_out(soap, "ns1:Anulacion", id, NULL);
	case SOAP_TYPE__ns1__ConfirmacionResponse:
		return ((_ns1__ConfirmacionResponse *)ptr)->soap_out(soap, "ns1:ConfirmacionResponse", id, NULL);
	case SOAP_TYPE__ns1__Confirmacion:
		return ((_ns1__Confirmacion *)ptr)->soap_out(soap, "ns1:Confirmacion", id, NULL);
	case SOAP_TYPE__ns1__CertificacionResponse:
		return ((_ns1__CertificacionResponse *)ptr)->soap_out(soap, "ns1:CertificacionResponse", id, NULL);
	case SOAP_TYPE__ns1__Certificacion:
		return ((_ns1__Certificacion *)ptr)->soap_out(soap, "ns1:Certificacion", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__ConciliacionResponse:
		return soap_out_PointerTo_ns1__ConciliacionResponse(soap, tag, id, (_ns1__ConciliacionResponse *const*)ptr, "ns1:ConciliacionResponse");
	case SOAP_TYPE_PointerTo_ns1__Conciliacion:
		return soap_out_PointerTo_ns1__Conciliacion(soap, tag, id, (_ns1__Conciliacion *const*)ptr, "ns1:Conciliacion");
	case SOAP_TYPE_PointerTo_ns1__AnulacionResponse:
		return soap_out_PointerTo_ns1__AnulacionResponse(soap, tag, id, (_ns1__AnulacionResponse *const*)ptr, "ns1:AnulacionResponse");
	case SOAP_TYPE_PointerTo_ns1__Anulacion:
		return soap_out_PointerTo_ns1__Anulacion(soap, tag, id, (_ns1__Anulacion *const*)ptr, "ns1:Anulacion");
	case SOAP_TYPE_PointerTo_ns1__ConfirmacionResponse:
		return soap_out_PointerTo_ns1__ConfirmacionResponse(soap, tag, id, (_ns1__ConfirmacionResponse *const*)ptr, "ns1:ConfirmacionResponse");
	case SOAP_TYPE_PointerTo_ns1__Confirmacion:
		return soap_out_PointerTo_ns1__Confirmacion(soap, tag, id, (_ns1__Confirmacion *const*)ptr, "ns1:Confirmacion");
	case SOAP_TYPE_PointerTo_ns1__CertificacionResponse:
		return soap_out_PointerTo_ns1__CertificacionResponse(soap, tag, id, (_ns1__CertificacionResponse *const*)ptr, "ns1:CertificacionResponse");
	case SOAP_TYPE_PointerTo_ns1__Certificacion:
		return soap_out_PointerTo_ns1__Certificacion(soap, tag, id, (_ns1__Certificacion *const*)ptr, "ns1:Certificacion");
	case SOAP_TYPE_PointerTo_ns1__ConciliacionResponse_ConciliacionResult:
		return soap_out_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(soap, tag, id, (_ns1__ConciliacionResponse_ConciliacionResult *const*)ptr, "ns1:ConciliacionResponse-ConciliacionResult");
	case SOAP_TYPE_PointerTo_ns1__AnulacionResponse_AnulacionResult:
		return soap_out_PointerTo_ns1__AnulacionResponse_AnulacionResult(soap, tag, id, (_ns1__AnulacionResponse_AnulacionResult *const*)ptr, "ns1:AnulacionResponse-AnulacionResult");
	case SOAP_TYPE_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult:
		return soap_out_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(soap, tag, id, (_ns1__ConfirmacionResponse_ConfirmacionResult *const*)ptr, "ns1:ConfirmacionResponse-ConfirmacionResult");
	case SOAP_TYPE_PointerTo_ns1__CertificacionResponse_CertificacionResult:
		return soap_out_PointerTo_ns1__CertificacionResponse_CertificacionResult(soap, tag, id, (_ns1__CertificacionResponse_CertificacionResult *const*)ptr, "ns1:CertificacionResponse-CertificacionResult");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult:
		((_ns1__ConciliacionResponse_ConciliacionResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult:
		((_ns1__AnulacionResponse_AnulacionResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult:
		((_ns1__ConfirmacionResponse_ConfirmacionResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult:
		((_ns1__CertificacionResponse_CertificacionResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__ConciliacionResponse:
		((_ns1__ConciliacionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Conciliacion:
		((_ns1__Conciliacion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AnulacionResponse:
		((_ns1__AnulacionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Anulacion:
		((_ns1__Anulacion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__ConfirmacionResponse:
		((_ns1__ConfirmacionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Confirmacion:
		((_ns1__Confirmacion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CertificacionResponse:
		((_ns1__CertificacionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Certificacion:
		((_ns1__Certificacion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__Conciliacion_:
		soap_serialize___ns1__Conciliacion_(soap, (const struct __ns1__Conciliacion_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Anulacion_:
		soap_serialize___ns1__Anulacion_(soap, (const struct __ns1__Anulacion_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Confirmacion_:
		soap_serialize___ns1__Confirmacion_(soap, (const struct __ns1__Confirmacion_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Certificacion_:
		soap_serialize___ns1__Certificacion_(soap, (const struct __ns1__Certificacion_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Conciliacion:
		soap_serialize___ns1__Conciliacion(soap, (const struct __ns1__Conciliacion *)ptr);
		break;
	case SOAP_TYPE___ns1__Anulacion:
		soap_serialize___ns1__Anulacion(soap, (const struct __ns1__Anulacion *)ptr);
		break;
	case SOAP_TYPE___ns1__Confirmacion:
		soap_serialize___ns1__Confirmacion(soap, (const struct __ns1__Confirmacion *)ptr);
		break;
	case SOAP_TYPE___ns1__Certificacion:
		soap_serialize___ns1__Certificacion(soap, (const struct __ns1__Certificacion *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ConciliacionResponse:
		soap_serialize_PointerTo_ns1__ConciliacionResponse(soap, (_ns1__ConciliacionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Conciliacion:
		soap_serialize_PointerTo_ns1__Conciliacion(soap, (_ns1__Conciliacion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AnulacionResponse:
		soap_serialize_PointerTo_ns1__AnulacionResponse(soap, (_ns1__AnulacionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Anulacion:
		soap_serialize_PointerTo_ns1__Anulacion(soap, (_ns1__Anulacion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ConfirmacionResponse:
		soap_serialize_PointerTo_ns1__ConfirmacionResponse(soap, (_ns1__ConfirmacionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Confirmacion:
		soap_serialize_PointerTo_ns1__Confirmacion(soap, (_ns1__Confirmacion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CertificacionResponse:
		soap_serialize_PointerTo_ns1__CertificacionResponse(soap, (_ns1__CertificacionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Certificacion:
		soap_serialize_PointerTo_ns1__Certificacion(soap, (_ns1__Certificacion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ConciliacionResponse_ConciliacionResult:
		soap_serialize_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(soap, (_ns1__ConciliacionResponse_ConciliacionResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AnulacionResponse_AnulacionResult:
		soap_serialize_PointerTo_ns1__AnulacionResponse_AnulacionResult(soap, (_ns1__AnulacionResponse_AnulacionResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult:
		soap_serialize_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(soap, (_ns1__ConfirmacionResponse_ConfirmacionResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CertificacionResponse_CertificacionResult:
		soap_serialize_PointerTo_ns1__CertificacionResponse_CertificacionResult(soap, (_ns1__CertificacionResponse_CertificacionResult *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Certificacion:
		return (void*)soap_instantiate__ns1__Certificacion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult:
		return (void*)soap_instantiate__ns1__CertificacionResponse_CertificacionResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CertificacionResponse:
		return (void*)soap_instantiate__ns1__CertificacionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Confirmacion:
		return (void*)soap_instantiate__ns1__Confirmacion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult:
		return (void*)soap_instantiate__ns1__ConfirmacionResponse_ConfirmacionResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ConfirmacionResponse:
		return (void*)soap_instantiate__ns1__ConfirmacionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Anulacion:
		return (void*)soap_instantiate__ns1__Anulacion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult:
		return (void*)soap_instantiate__ns1__AnulacionResponse_AnulacionResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AnulacionResponse:
		return (void*)soap_instantiate__ns1__AnulacionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Conciliacion:
		return (void*)soap_instantiate__ns1__Conciliacion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult:
		return (void*)soap_instantiate__ns1__ConciliacionResponse_ConciliacionResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__ConciliacionResponse:
		return (void*)soap_instantiate__ns1__ConciliacionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Certificacion:
		return (void*)soap_instantiate___ns1__Certificacion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Confirmacion:
		return (void*)soap_instantiate___ns1__Confirmacion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Anulacion:
		return (void*)soap_instantiate___ns1__Anulacion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Conciliacion:
		return (void*)soap_instantiate___ns1__Conciliacion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Certificacion_:
		return (void*)soap_instantiate___ns1__Certificacion_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Confirmacion_:
		return (void*)soap_instantiate___ns1__Confirmacion_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Anulacion_:
		return (void*)soap_instantiate___ns1__Anulacion_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Conciliacion_:
		return (void*)soap_instantiate___ns1__Conciliacion_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Certificacion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Certificacion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Certificacion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CertificacionResponse_CertificacionResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CertificacionResponse_CertificacionResult*)p->ptr);
		break;
	case SOAP_TYPE__ns1__CertificacionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__CertificacionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__CertificacionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Confirmacion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Confirmacion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Confirmacion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ConfirmacionResponse_ConfirmacionResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ConfirmacionResponse_ConfirmacionResult*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ConfirmacionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ConfirmacionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ConfirmacionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Anulacion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Anulacion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Anulacion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AnulacionResponse_AnulacionResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AnulacionResponse_AnulacionResult*)p->ptr);
		break;
	case SOAP_TYPE__ns1__AnulacionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__AnulacionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__AnulacionResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns1__Conciliacion:
		if (p->size < 0)
			SOAP_DELETE((_ns1__Conciliacion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__Conciliacion*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ConciliacionResponse_ConciliacionResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ConciliacionResponse_ConciliacionResult*)p->ptr);
		break;
	case SOAP_TYPE__ns1__ConciliacionResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns1__ConciliacionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__ConciliacionResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Certificacion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Certificacion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Certificacion*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Confirmacion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Confirmacion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Confirmacion*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Anulacion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Anulacion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Anulacion*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Conciliacion:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Conciliacion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Conciliacion*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Certificacion_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Certificacion_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Certificacion_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Confirmacion_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Confirmacion_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Confirmacion_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Anulacion_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Anulacion_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Anulacion_*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Conciliacion_:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Conciliacion_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Conciliacion_*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__ConciliacionResponse_ConciliacionResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__ConciliacionResponse_ConciliacionResult::__any = NULL;
	this->_ns1__ConciliacionResponse_ConciliacionResult::__mixed = NULL;
}

void _ns1__ConciliacionResponse_ConciliacionResult::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
#endif
}

int _ns1__ConciliacionResponse_ConciliacionResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ConciliacionResponse_ConciliacionResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, const char *tag, int id, const _ns1__ConciliacionResponse_ConciliacionResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult), type))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_ns1__ConciliacionResponse_ConciliacionResult::__any), NULL);
	soap_outliteral(soap, "-mixed", &(a->_ns1__ConciliacionResponse_ConciliacionResult::__mixed), NULL);
	return soap_element_end_out(soap, tag);
}

void *_ns1__ConciliacionResponse_ConciliacionResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ConciliacionResponse_ConciliacionResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ConciliacionResponse_ConciliacionResult * SOAP_FMAC4 soap_in__ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, const char *tag, _ns1__ConciliacionResponse_ConciliacionResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ConciliacionResponse_ConciliacionResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult, sizeof(_ns1__ConciliacionResponse_ConciliacionResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ConciliacionResponse_ConciliacionResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_ns1__ConciliacionResponse_ConciliacionResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-mixed", &(a->_ns1__ConciliacionResponse_ConciliacionResult::__mixed)))
				{	soap_flag___mixed1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ConciliacionResponse_ConciliacionResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult, 0, sizeof(_ns1__ConciliacionResponse_ConciliacionResult), 0, soap_copy__ns1__ConciliacionResponse_ConciliacionResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__ConciliacionResponse_ConciliacionResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult);
	if (this->soap_out(soap, tag?tag:"ns1:ConciliacionResponse-ConciliacionResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ConciliacionResponse_ConciliacionResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ConciliacionResponse_ConciliacionResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ConciliacionResponse_ConciliacionResult * SOAP_FMAC4 soap_get__ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, _ns1__ConciliacionResponse_ConciliacionResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ConciliacionResponse_ConciliacionResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ConciliacionResponse_ConciliacionResult * SOAP_FMAC2 soap_instantiate__ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ConciliacionResponse_ConciliacionResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ConciliacionResponse_ConciliacionResult);
		if (size)
			*size = sizeof(_ns1__ConciliacionResponse_ConciliacionResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ConciliacionResponse_ConciliacionResult, n);
		if (size)
			*size = n * sizeof(_ns1__ConciliacionResponse_ConciliacionResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ConciliacionResponse_ConciliacionResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ConciliacionResponse_ConciliacionResult %p -> %p\n", q, p));
	*(_ns1__ConciliacionResponse_ConciliacionResult*)p = *(_ns1__ConciliacionResponse_ConciliacionResult*)q;
}

void _ns1__AnulacionResponse_AnulacionResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__AnulacionResponse_AnulacionResult::__any = NULL;
	this->_ns1__AnulacionResponse_AnulacionResult::__mixed = NULL;
}

void _ns1__AnulacionResponse_AnulacionResult::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
#endif
}

int _ns1__AnulacionResponse_AnulacionResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AnulacionResponse_AnulacionResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AnulacionResponse_AnulacionResult(struct soap *soap, const char *tag, int id, const _ns1__AnulacionResponse_AnulacionResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult), type))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_ns1__AnulacionResponse_AnulacionResult::__any), NULL);
	soap_outliteral(soap, "-mixed", &(a->_ns1__AnulacionResponse_AnulacionResult::__mixed), NULL);
	return soap_element_end_out(soap, tag);
}

void *_ns1__AnulacionResponse_AnulacionResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AnulacionResponse_AnulacionResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AnulacionResponse_AnulacionResult * SOAP_FMAC4 soap_in__ns1__AnulacionResponse_AnulacionResult(struct soap *soap, const char *tag, _ns1__AnulacionResponse_AnulacionResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AnulacionResponse_AnulacionResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult, sizeof(_ns1__AnulacionResponse_AnulacionResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AnulacionResponse_AnulacionResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_ns1__AnulacionResponse_AnulacionResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-mixed", &(a->_ns1__AnulacionResponse_AnulacionResult::__mixed)))
				{	soap_flag___mixed1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AnulacionResponse_AnulacionResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult, 0, sizeof(_ns1__AnulacionResponse_AnulacionResult), 0, soap_copy__ns1__AnulacionResponse_AnulacionResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AnulacionResponse_AnulacionResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult);
	if (this->soap_out(soap, tag?tag:"ns1:AnulacionResponse-AnulacionResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AnulacionResponse_AnulacionResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AnulacionResponse_AnulacionResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AnulacionResponse_AnulacionResult * SOAP_FMAC4 soap_get__ns1__AnulacionResponse_AnulacionResult(struct soap *soap, _ns1__AnulacionResponse_AnulacionResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AnulacionResponse_AnulacionResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AnulacionResponse_AnulacionResult * SOAP_FMAC2 soap_instantiate__ns1__AnulacionResponse_AnulacionResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AnulacionResponse_AnulacionResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AnulacionResponse_AnulacionResult);
		if (size)
			*size = sizeof(_ns1__AnulacionResponse_AnulacionResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AnulacionResponse_AnulacionResult, n);
		if (size)
			*size = n * sizeof(_ns1__AnulacionResponse_AnulacionResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AnulacionResponse_AnulacionResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AnulacionResponse_AnulacionResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AnulacionResponse_AnulacionResult %p -> %p\n", q, p));
	*(_ns1__AnulacionResponse_AnulacionResult*)p = *(_ns1__AnulacionResponse_AnulacionResult*)q;
}

void _ns1__ConfirmacionResponse_ConfirmacionResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__ConfirmacionResponse_ConfirmacionResult::__any = NULL;
	this->_ns1__ConfirmacionResponse_ConfirmacionResult::__mixed = NULL;
}

void _ns1__ConfirmacionResponse_ConfirmacionResult::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
#endif
}

int _ns1__ConfirmacionResponse_ConfirmacionResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ConfirmacionResponse_ConfirmacionResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, const char *tag, int id, const _ns1__ConfirmacionResponse_ConfirmacionResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult), type))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_ns1__ConfirmacionResponse_ConfirmacionResult::__any), NULL);
	soap_outliteral(soap, "-mixed", &(a->_ns1__ConfirmacionResponse_ConfirmacionResult::__mixed), NULL);
	return soap_element_end_out(soap, tag);
}

void *_ns1__ConfirmacionResponse_ConfirmacionResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ConfirmacionResponse_ConfirmacionResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ConfirmacionResponse_ConfirmacionResult * SOAP_FMAC4 soap_in__ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, const char *tag, _ns1__ConfirmacionResponse_ConfirmacionResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ConfirmacionResponse_ConfirmacionResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult, sizeof(_ns1__ConfirmacionResponse_ConfirmacionResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ConfirmacionResponse_ConfirmacionResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_ns1__ConfirmacionResponse_ConfirmacionResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-mixed", &(a->_ns1__ConfirmacionResponse_ConfirmacionResult::__mixed)))
				{	soap_flag___mixed1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ConfirmacionResponse_ConfirmacionResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult, 0, sizeof(_ns1__ConfirmacionResponse_ConfirmacionResult), 0, soap_copy__ns1__ConfirmacionResponse_ConfirmacionResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__ConfirmacionResponse_ConfirmacionResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult);
	if (this->soap_out(soap, tag?tag:"ns1:ConfirmacionResponse-ConfirmacionResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ConfirmacionResponse_ConfirmacionResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ConfirmacionResponse_ConfirmacionResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ConfirmacionResponse_ConfirmacionResult * SOAP_FMAC4 soap_get__ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, _ns1__ConfirmacionResponse_ConfirmacionResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ConfirmacionResponse_ConfirmacionResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ConfirmacionResponse_ConfirmacionResult * SOAP_FMAC2 soap_instantiate__ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ConfirmacionResponse_ConfirmacionResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ConfirmacionResponse_ConfirmacionResult);
		if (size)
			*size = sizeof(_ns1__ConfirmacionResponse_ConfirmacionResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ConfirmacionResponse_ConfirmacionResult, n);
		if (size)
			*size = n * sizeof(_ns1__ConfirmacionResponse_ConfirmacionResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ConfirmacionResponse_ConfirmacionResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ConfirmacionResponse_ConfirmacionResult %p -> %p\n", q, p));
	*(_ns1__ConfirmacionResponse_ConfirmacionResult*)p = *(_ns1__ConfirmacionResponse_ConfirmacionResult*)q;
}

void _ns1__CertificacionResponse_CertificacionResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__CertificacionResponse_CertificacionResult::__any = NULL;
	this->_ns1__CertificacionResponse_CertificacionResult::__mixed = NULL;
}

void _ns1__CertificacionResponse_CertificacionResult::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
#endif
}

int _ns1__CertificacionResponse_CertificacionResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CertificacionResponse_CertificacionResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CertificacionResponse_CertificacionResult(struct soap *soap, const char *tag, int id, const _ns1__CertificacionResponse_CertificacionResult *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult), type))
		return soap->error;
	soap_outliteral(soap, "-any", &(a->_ns1__CertificacionResponse_CertificacionResult::__any), NULL);
	soap_outliteral(soap, "-mixed", &(a->_ns1__CertificacionResponse_CertificacionResult::__mixed), NULL);
	return soap_element_end_out(soap, tag);
}

void *_ns1__CertificacionResponse_CertificacionResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CertificacionResponse_CertificacionResult(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CertificacionResponse_CertificacionResult * SOAP_FMAC4 soap_in__ns1__CertificacionResponse_CertificacionResult(struct soap *soap, const char *tag, _ns1__CertificacionResponse_CertificacionResult *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CertificacionResponse_CertificacionResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult, sizeof(_ns1__CertificacionResponse_CertificacionResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CertificacionResponse_CertificacionResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___any1 = 1;
	size_t soap_flag___mixed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag___any1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &(a->_ns1__CertificacionResponse_CertificacionResult::__any)))
				{	soap_flag___any1--;
					continue;
				}
			if (soap_flag___mixed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-mixed", &(a->_ns1__CertificacionResponse_CertificacionResult::__mixed)))
				{	soap_flag___mixed1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CertificacionResponse_CertificacionResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult, 0, sizeof(_ns1__CertificacionResponse_CertificacionResult), 0, soap_copy__ns1__CertificacionResponse_CertificacionResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CertificacionResponse_CertificacionResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult);
	if (this->soap_out(soap, tag?tag:"ns1:CertificacionResponse-CertificacionResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CertificacionResponse_CertificacionResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CertificacionResponse_CertificacionResult(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CertificacionResponse_CertificacionResult * SOAP_FMAC4 soap_get__ns1__CertificacionResponse_CertificacionResult(struct soap *soap, _ns1__CertificacionResponse_CertificacionResult *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CertificacionResponse_CertificacionResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CertificacionResponse_CertificacionResult * SOAP_FMAC2 soap_instantiate__ns1__CertificacionResponse_CertificacionResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CertificacionResponse_CertificacionResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CertificacionResponse_CertificacionResult);
		if (size)
			*size = sizeof(_ns1__CertificacionResponse_CertificacionResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CertificacionResponse_CertificacionResult, n);
		if (size)
			*size = n * sizeof(_ns1__CertificacionResponse_CertificacionResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CertificacionResponse_CertificacionResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CertificacionResponse_CertificacionResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CertificacionResponse_CertificacionResult %p -> %p\n", q, p));
	*(_ns1__CertificacionResponse_CertificacionResult*)p = *(_ns1__CertificacionResponse_CertificacionResult*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _ns1__ConciliacionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ConciliacionResponse::ConciliacionResult = NULL;
	/* transient soap skipped */
}

void _ns1__ConciliacionResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(soap, &this->_ns1__ConciliacionResponse::ConciliacionResult);
	/* transient soap skipped */
#endif
}

int _ns1__ConciliacionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ConciliacionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ConciliacionResponse(struct soap *soap, const char *tag, int id, const _ns1__ConciliacionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ConciliacionResponse), type))
		return soap->error;
	if (a->ConciliacionResult)
		soap_element_result(soap, "ns1:ConciliacionResult");
	if (soap_out_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(soap, "ns1:ConciliacionResult", -1, &(a->_ns1__ConciliacionResponse::ConciliacionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ConciliacionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ConciliacionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ConciliacionResponse * SOAP_FMAC4 soap_in__ns1__ConciliacionResponse(struct soap *soap, const char *tag, _ns1__ConciliacionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ConciliacionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ConciliacionResponse, sizeof(_ns1__ConciliacionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ConciliacionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ConciliacionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ConciliacionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConciliacionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(soap, "ns1:ConciliacionResult", &(a->_ns1__ConciliacionResponse::ConciliacionResult), ""))
				{	soap_flag_ConciliacionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:ConciliacionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ConciliacionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ConciliacionResponse, 0, sizeof(_ns1__ConciliacionResponse), 0, soap_copy__ns1__ConciliacionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__ConciliacionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ConciliacionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:ConciliacionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ConciliacionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ConciliacionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ConciliacionResponse * SOAP_FMAC4 soap_get__ns1__ConciliacionResponse(struct soap *soap, _ns1__ConciliacionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ConciliacionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ConciliacionResponse * SOAP_FMAC2 soap_instantiate__ns1__ConciliacionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ConciliacionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ConciliacionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ConciliacionResponse);
		if (size)
			*size = sizeof(_ns1__ConciliacionResponse);
		((_ns1__ConciliacionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ConciliacionResponse, n);
		if (size)
			*size = n * sizeof(_ns1__ConciliacionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ConciliacionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ConciliacionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ConciliacionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ConciliacionResponse %p -> %p\n", q, p));
	*(_ns1__ConciliacionResponse*)p = *(_ns1__ConciliacionResponse*)q;
}

void _ns1__Conciliacion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__Conciliacion::extCodSeguro);
	soap_default_int(soap, &this->_ns1__Conciliacion::extFolioAuto);
	/* transient soap skipped */
}

void _ns1__Conciliacion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
#endif
}

int _ns1__Conciliacion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Conciliacion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Conciliacion(struct soap *soap, const char *tag, int id, const _ns1__Conciliacion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Conciliacion), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:extCodSeguro", -1, &(a->_ns1__Conciliacion::extCodSeguro), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extFolioAuto", -1, &(a->_ns1__Conciliacion::extFolioAuto), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Conciliacion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Conciliacion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Conciliacion * SOAP_FMAC4 soap_in__ns1__Conciliacion(struct soap *soap, const char *tag, _ns1__Conciliacion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Conciliacion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Conciliacion, sizeof(_ns1__Conciliacion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Conciliacion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Conciliacion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_extCodSeguro1 = 1;
	size_t soap_flag_extFolioAuto1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_extCodSeguro1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extCodSeguro", &(a->_ns1__Conciliacion::extCodSeguro), "xsd:int"))
				{	soap_flag_extCodSeguro1--;
					continue;
				}
			if (soap_flag_extFolioAuto1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extFolioAuto", &(a->_ns1__Conciliacion::extFolioAuto), "xsd:int"))
				{	soap_flag_extFolioAuto1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Conciliacion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Conciliacion, 0, sizeof(_ns1__Conciliacion), 0, soap_copy__ns1__Conciliacion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_extCodSeguro1 > 0 || soap_flag_extFolioAuto1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Conciliacion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Conciliacion);
	if (this->soap_out(soap, tag?tag:"ns1:Conciliacion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Conciliacion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Conciliacion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Conciliacion * SOAP_FMAC4 soap_get__ns1__Conciliacion(struct soap *soap, _ns1__Conciliacion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Conciliacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Conciliacion * SOAP_FMAC2 soap_instantiate__ns1__Conciliacion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Conciliacion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Conciliacion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Conciliacion);
		if (size)
			*size = sizeof(_ns1__Conciliacion);
		((_ns1__Conciliacion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Conciliacion, n);
		if (size)
			*size = n * sizeof(_ns1__Conciliacion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Conciliacion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Conciliacion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Conciliacion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Conciliacion %p -> %p\n", q, p));
	*(_ns1__Conciliacion*)p = *(_ns1__Conciliacion*)q;
}

void _ns1__AnulacionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__AnulacionResponse::AnulacionResult = NULL;
	/* transient soap skipped */
}

void _ns1__AnulacionResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__AnulacionResponse_AnulacionResult(soap, &this->_ns1__AnulacionResponse::AnulacionResult);
	/* transient soap skipped */
#endif
}

int _ns1__AnulacionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AnulacionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AnulacionResponse(struct soap *soap, const char *tag, int id, const _ns1__AnulacionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AnulacionResponse), type))
		return soap->error;
	if (a->AnulacionResult)
		soap_element_result(soap, "ns1:AnulacionResult");
	if (soap_out_PointerTo_ns1__AnulacionResponse_AnulacionResult(soap, "ns1:AnulacionResult", -1, &(a->_ns1__AnulacionResponse::AnulacionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AnulacionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AnulacionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AnulacionResponse * SOAP_FMAC4 soap_in__ns1__AnulacionResponse(struct soap *soap, const char *tag, _ns1__AnulacionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AnulacionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AnulacionResponse, sizeof(_ns1__AnulacionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AnulacionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AnulacionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AnulacionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AnulacionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AnulacionResponse_AnulacionResult(soap, "ns1:AnulacionResult", &(a->_ns1__AnulacionResponse::AnulacionResult), ""))
				{	soap_flag_AnulacionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:AnulacionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AnulacionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AnulacionResponse, 0, sizeof(_ns1__AnulacionResponse), 0, soap_copy__ns1__AnulacionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__AnulacionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__AnulacionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:AnulacionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__AnulacionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AnulacionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AnulacionResponse * SOAP_FMAC4 soap_get__ns1__AnulacionResponse(struct soap *soap, _ns1__AnulacionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AnulacionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__AnulacionResponse * SOAP_FMAC2 soap_instantiate__ns1__AnulacionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AnulacionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AnulacionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__AnulacionResponse);
		if (size)
			*size = sizeof(_ns1__AnulacionResponse);
		((_ns1__AnulacionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__AnulacionResponse, n);
		if (size)
			*size = n * sizeof(_ns1__AnulacionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__AnulacionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__AnulacionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AnulacionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AnulacionResponse %p -> %p\n", q, p));
	*(_ns1__AnulacionResponse*)p = *(_ns1__AnulacionResponse*)q;
}

void _ns1__Anulacion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__Anulacion::extCodSeguro);
	this->_ns1__Anulacion::extRutBeneficiario = NULL;
	soap_default_int(soap, &this->_ns1__Anulacion::extFolioAuto);
	/* transient soap skipped */
}

void _ns1__Anulacion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Anulacion::extRutBeneficiario);
	/* transient soap skipped */
#endif
}

int _ns1__Anulacion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Anulacion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Anulacion(struct soap *soap, const char *tag, int id, const _ns1__Anulacion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Anulacion), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:extCodSeguro", -1, &(a->_ns1__Anulacion::extCodSeguro), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:extRutBeneficiario", -1, &(a->_ns1__Anulacion::extRutBeneficiario), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extFolioAuto", -1, &(a->_ns1__Anulacion::extFolioAuto), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Anulacion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Anulacion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Anulacion * SOAP_FMAC4 soap_in__ns1__Anulacion(struct soap *soap, const char *tag, _ns1__Anulacion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Anulacion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Anulacion, sizeof(_ns1__Anulacion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Anulacion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Anulacion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_extCodSeguro1 = 1;
	size_t soap_flag_extRutBeneficiario1 = 1;
	size_t soap_flag_extFolioAuto1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_extCodSeguro1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extCodSeguro", &(a->_ns1__Anulacion::extCodSeguro), "xsd:int"))
				{	soap_flag_extCodSeguro1--;
					continue;
				}
			if (soap_flag_extRutBeneficiario1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:extRutBeneficiario", &(a->_ns1__Anulacion::extRutBeneficiario), "xsd:string"))
				{	soap_flag_extRutBeneficiario1--;
					continue;
				}
			if (soap_flag_extFolioAuto1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extFolioAuto", &(a->_ns1__Anulacion::extFolioAuto), "xsd:int"))
				{	soap_flag_extFolioAuto1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Anulacion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Anulacion, 0, sizeof(_ns1__Anulacion), 0, soap_copy__ns1__Anulacion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_extCodSeguro1 > 0 || soap_flag_extFolioAuto1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Anulacion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Anulacion);
	if (this->soap_out(soap, tag?tag:"ns1:Anulacion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Anulacion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Anulacion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Anulacion * SOAP_FMAC4 soap_get__ns1__Anulacion(struct soap *soap, _ns1__Anulacion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Anulacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Anulacion * SOAP_FMAC2 soap_instantiate__ns1__Anulacion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Anulacion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Anulacion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Anulacion);
		if (size)
			*size = sizeof(_ns1__Anulacion);
		((_ns1__Anulacion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Anulacion, n);
		if (size)
			*size = n * sizeof(_ns1__Anulacion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Anulacion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Anulacion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Anulacion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Anulacion %p -> %p\n", q, p));
	*(_ns1__Anulacion*)p = *(_ns1__Anulacion*)q;
}

void _ns1__ConfirmacionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__ConfirmacionResponse::ConfirmacionResult = NULL;
	/* transient soap skipped */
}

void _ns1__ConfirmacionResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(soap, &this->_ns1__ConfirmacionResponse::ConfirmacionResult);
	/* transient soap skipped */
#endif
}

int _ns1__ConfirmacionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__ConfirmacionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ConfirmacionResponse(struct soap *soap, const char *tag, int id, const _ns1__ConfirmacionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__ConfirmacionResponse), type))
		return soap->error;
	if (a->ConfirmacionResult)
		soap_element_result(soap, "ns1:ConfirmacionResult");
	if (soap_out_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(soap, "ns1:ConfirmacionResult", -1, &(a->_ns1__ConfirmacionResponse::ConfirmacionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__ConfirmacionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__ConfirmacionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__ConfirmacionResponse * SOAP_FMAC4 soap_in__ns1__ConfirmacionResponse(struct soap *soap, const char *tag, _ns1__ConfirmacionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__ConfirmacionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__ConfirmacionResponse, sizeof(_ns1__ConfirmacionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__ConfirmacionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__ConfirmacionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ConfirmacionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ConfirmacionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(soap, "ns1:ConfirmacionResult", &(a->_ns1__ConfirmacionResponse::ConfirmacionResult), ""))
				{	soap_flag_ConfirmacionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:ConfirmacionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__ConfirmacionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__ConfirmacionResponse, 0, sizeof(_ns1__ConfirmacionResponse), 0, soap_copy__ns1__ConfirmacionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__ConfirmacionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__ConfirmacionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:ConfirmacionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__ConfirmacionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__ConfirmacionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__ConfirmacionResponse * SOAP_FMAC4 soap_get__ns1__ConfirmacionResponse(struct soap *soap, _ns1__ConfirmacionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__ConfirmacionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__ConfirmacionResponse * SOAP_FMAC2 soap_instantiate__ns1__ConfirmacionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__ConfirmacionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__ConfirmacionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__ConfirmacionResponse);
		if (size)
			*size = sizeof(_ns1__ConfirmacionResponse);
		((_ns1__ConfirmacionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__ConfirmacionResponse, n);
		if (size)
			*size = n * sizeof(_ns1__ConfirmacionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__ConfirmacionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__ConfirmacionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ConfirmacionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__ConfirmacionResponse %p -> %p\n", q, p));
	*(_ns1__ConfirmacionResponse*)p = *(_ns1__ConfirmacionResponse*)q;
}

void _ns1__Confirmacion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__Confirmacion::extCodSeguro);
	soap_default_int(soap, &this->_ns1__Confirmacion::extNumOperacion);
	this->_ns1__Confirmacion::extRutBeneficiario = NULL;
	this->_ns1__Confirmacion::extRutPrestador = NULL;
	this->_ns1__Confirmacion::extFechaEmision = NULL;
	this->_ns1__Confirmacion::extRutEmisor = NULL;
	this->_ns1__Confirmacion::extRutCajero = NULL;
	soap_default_int(soap, &this->_ns1__Confirmacion::extFolioBono);
	soap_default_int(soap, &this->_ns1__Confirmacion::extCodFinanciador);
	soap_default_int(soap, &this->_ns1__Confirmacion::extCodLugar);
	soap_default_int(soap, &this->_ns1__Confirmacion::extMtoTot);
	soap_default_int(soap, &this->_ns1__Confirmacion::extMtoCopago);
	soap_default_int(soap, &this->_ns1__Confirmacion::extMtoBonif);
	this->_ns1__Confirmacion::ExtLisPrest1 = NULL;
	/* transient soap skipped */
}

void _ns1__Confirmacion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Confirmacion::extRutBeneficiario);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Confirmacion::extRutPrestador);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Confirmacion::extFechaEmision);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Confirmacion::extRutEmisor);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Confirmacion::extRutCajero);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Confirmacion::ExtLisPrest1);
	/* transient soap skipped */
#endif
}

int _ns1__Confirmacion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Confirmacion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Confirmacion(struct soap *soap, const char *tag, int id, const _ns1__Confirmacion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Confirmacion), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:extCodSeguro", -1, &(a->_ns1__Confirmacion::extCodSeguro), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extNumOperacion", -1, &(a->_ns1__Confirmacion::extNumOperacion), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:extRutBeneficiario", -1, &(a->_ns1__Confirmacion::extRutBeneficiario), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:extRutPrestador", -1, &(a->_ns1__Confirmacion::extRutPrestador), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:extFechaEmision", -1, &(a->_ns1__Confirmacion::extFechaEmision), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:extRutEmisor", -1, &(a->_ns1__Confirmacion::extRutEmisor), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:extRutCajero", -1, &(a->_ns1__Confirmacion::extRutCajero), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extFolioBono", -1, &(a->_ns1__Confirmacion::extFolioBono), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extCodFinanciador", -1, &(a->_ns1__Confirmacion::extCodFinanciador), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extCodLugar", -1, &(a->_ns1__Confirmacion::extCodLugar), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extMtoTot", -1, &(a->_ns1__Confirmacion::extMtoTot), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extMtoCopago", -1, &(a->_ns1__Confirmacion::extMtoCopago), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extMtoBonif", -1, &(a->_ns1__Confirmacion::extMtoBonif), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ExtLisPrest1", -1, &(a->_ns1__Confirmacion::ExtLisPrest1), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Confirmacion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Confirmacion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Confirmacion * SOAP_FMAC4 soap_in__ns1__Confirmacion(struct soap *soap, const char *tag, _ns1__Confirmacion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Confirmacion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Confirmacion, sizeof(_ns1__Confirmacion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Confirmacion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Confirmacion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_extCodSeguro1 = 1;
	size_t soap_flag_extNumOperacion1 = 1;
	size_t soap_flag_extRutBeneficiario1 = 1;
	size_t soap_flag_extRutPrestador1 = 1;
	size_t soap_flag_extFechaEmision1 = 1;
	size_t soap_flag_extRutEmisor1 = 1;
	size_t soap_flag_extRutCajero1 = 1;
	size_t soap_flag_extFolioBono1 = 1;
	size_t soap_flag_extCodFinanciador1 = 1;
	size_t soap_flag_extCodLugar1 = 1;
	size_t soap_flag_extMtoTot1 = 1;
	size_t soap_flag_extMtoCopago1 = 1;
	size_t soap_flag_extMtoBonif1 = 1;
	size_t soap_flag_ExtLisPrest11 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_extCodSeguro1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extCodSeguro", &(a->_ns1__Confirmacion::extCodSeguro), "xsd:int"))
				{	soap_flag_extCodSeguro1--;
					continue;
				}
			if (soap_flag_extNumOperacion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extNumOperacion", &(a->_ns1__Confirmacion::extNumOperacion), "xsd:int"))
				{	soap_flag_extNumOperacion1--;
					continue;
				}
			if (soap_flag_extRutBeneficiario1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:extRutBeneficiario", &(a->_ns1__Confirmacion::extRutBeneficiario), "xsd:string"))
				{	soap_flag_extRutBeneficiario1--;
					continue;
				}
			if (soap_flag_extRutPrestador1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:extRutPrestador", &(a->_ns1__Confirmacion::extRutPrestador), "xsd:string"))
				{	soap_flag_extRutPrestador1--;
					continue;
				}
			if (soap_flag_extFechaEmision1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:extFechaEmision", &(a->_ns1__Confirmacion::extFechaEmision), "xsd:string"))
				{	soap_flag_extFechaEmision1--;
					continue;
				}
			if (soap_flag_extRutEmisor1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:extRutEmisor", &(a->_ns1__Confirmacion::extRutEmisor), "xsd:string"))
				{	soap_flag_extRutEmisor1--;
					continue;
				}
			if (soap_flag_extRutCajero1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:extRutCajero", &(a->_ns1__Confirmacion::extRutCajero), "xsd:string"))
				{	soap_flag_extRutCajero1--;
					continue;
				}
			if (soap_flag_extFolioBono1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extFolioBono", &(a->_ns1__Confirmacion::extFolioBono), "xsd:int"))
				{	soap_flag_extFolioBono1--;
					continue;
				}
			if (soap_flag_extCodFinanciador1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extCodFinanciador", &(a->_ns1__Confirmacion::extCodFinanciador), "xsd:int"))
				{	soap_flag_extCodFinanciador1--;
					continue;
				}
			if (soap_flag_extCodLugar1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extCodLugar", &(a->_ns1__Confirmacion::extCodLugar), "xsd:int"))
				{	soap_flag_extCodLugar1--;
					continue;
				}
			if (soap_flag_extMtoTot1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extMtoTot", &(a->_ns1__Confirmacion::extMtoTot), "xsd:int"))
				{	soap_flag_extMtoTot1--;
					continue;
				}
			if (soap_flag_extMtoCopago1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extMtoCopago", &(a->_ns1__Confirmacion::extMtoCopago), "xsd:int"))
				{	soap_flag_extMtoCopago1--;
					continue;
				}
			if (soap_flag_extMtoBonif1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extMtoBonif", &(a->_ns1__Confirmacion::extMtoBonif), "xsd:int"))
				{	soap_flag_extMtoBonif1--;
					continue;
				}
			if (soap_flag_ExtLisPrest11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ExtLisPrest1", &(a->_ns1__Confirmacion::ExtLisPrest1), "xsd:string"))
				{	soap_flag_ExtLisPrest11--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Confirmacion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Confirmacion, 0, sizeof(_ns1__Confirmacion), 0, soap_copy__ns1__Confirmacion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_extCodSeguro1 > 0 || soap_flag_extNumOperacion1 > 0 || soap_flag_extFolioBono1 > 0 || soap_flag_extCodFinanciador1 > 0 || soap_flag_extCodLugar1 > 0 || soap_flag_extMtoTot1 > 0 || soap_flag_extMtoCopago1 > 0 || soap_flag_extMtoBonif1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Confirmacion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Confirmacion);
	if (this->soap_out(soap, tag?tag:"ns1:Confirmacion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Confirmacion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Confirmacion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Confirmacion * SOAP_FMAC4 soap_get__ns1__Confirmacion(struct soap *soap, _ns1__Confirmacion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Confirmacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Confirmacion * SOAP_FMAC2 soap_instantiate__ns1__Confirmacion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Confirmacion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Confirmacion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Confirmacion);
		if (size)
			*size = sizeof(_ns1__Confirmacion);
		((_ns1__Confirmacion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Confirmacion, n);
		if (size)
			*size = n * sizeof(_ns1__Confirmacion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Confirmacion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Confirmacion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Confirmacion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Confirmacion %p -> %p\n", q, p));
	*(_ns1__Confirmacion*)p = *(_ns1__Confirmacion*)q;
}

void _ns1__CertificacionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__CertificacionResponse::CertificacionResult = NULL;
	/* transient soap skipped */
}

void _ns1__CertificacionResponse::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CertificacionResponse_CertificacionResult(soap, &this->_ns1__CertificacionResponse::CertificacionResult);
	/* transient soap skipped */
#endif
}

int _ns1__CertificacionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CertificacionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CertificacionResponse(struct soap *soap, const char *tag, int id, const _ns1__CertificacionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CertificacionResponse), type))
		return soap->error;
	if (a->CertificacionResult)
		soap_element_result(soap, "ns1:CertificacionResult");
	if (soap_out_PointerTo_ns1__CertificacionResponse_CertificacionResult(soap, "ns1:CertificacionResult", -1, &(a->_ns1__CertificacionResponse::CertificacionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CertificacionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CertificacionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CertificacionResponse * SOAP_FMAC4 soap_in__ns1__CertificacionResponse(struct soap *soap, const char *tag, _ns1__CertificacionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CertificacionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CertificacionResponse, sizeof(_ns1__CertificacionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CertificacionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CertificacionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_CertificacionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CertificacionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CertificacionResponse_CertificacionResult(soap, "ns1:CertificacionResult", &(a->_ns1__CertificacionResponse::CertificacionResult), ""))
				{	soap_flag_CertificacionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CertificacionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CertificacionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CertificacionResponse, 0, sizeof(_ns1__CertificacionResponse), 0, soap_copy__ns1__CertificacionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns1__CertificacionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CertificacionResponse);
	if (this->soap_out(soap, tag?tag:"ns1:CertificacionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__CertificacionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CertificacionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CertificacionResponse * SOAP_FMAC4 soap_get__ns1__CertificacionResponse(struct soap *soap, _ns1__CertificacionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CertificacionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__CertificacionResponse * SOAP_FMAC2 soap_instantiate__ns1__CertificacionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CertificacionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CertificacionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__CertificacionResponse);
		if (size)
			*size = sizeof(_ns1__CertificacionResponse);
		((_ns1__CertificacionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__CertificacionResponse, n);
		if (size)
			*size = n * sizeof(_ns1__CertificacionResponse);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__CertificacionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__CertificacionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CertificacionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CertificacionResponse %p -> %p\n", q, p));
	*(_ns1__CertificacionResponse*)p = *(_ns1__CertificacionResponse*)q;
}

void _ns1__Certificacion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__Certificacion::extCodSeguro);
	this->_ns1__Certificacion::extRutBeneficiario = NULL;
	this->_ns1__Certificacion::extRutPrestador = NULL;
	soap_default_int(soap, &this->_ns1__Certificacion::extCodFinanciador);
	soap_default_int(soap, &this->_ns1__Certificacion::extCodLugar);
	soap_default_int(soap, &this->_ns1__Certificacion::extNumOperacion);
	this->_ns1__Certificacion::ExtLisPrest1 = NULL;
	this->_ns1__Certificacion::ExtLisPrest2 = NULL;
	this->_ns1__Certificacion::ExtLisPrest3 = NULL;
	this->_ns1__Certificacion::ExtLisPrest4 = NULL;
	this->_ns1__Certificacion::ExtLisPrest5 = NULL;
	this->_ns1__Certificacion::ExtLisPrest6 = NULL;
	/* transient soap skipped */
}

void _ns1__Certificacion::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Certificacion::extRutBeneficiario);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Certificacion::extRutPrestador);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Certificacion::ExtLisPrest1);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Certificacion::ExtLisPrest2);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Certificacion::ExtLisPrest3);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Certificacion::ExtLisPrest4);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Certificacion::ExtLisPrest5);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Certificacion::ExtLisPrest6);
	/* transient soap skipped */
#endif
}

int _ns1__Certificacion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Certificacion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Certificacion(struct soap *soap, const char *tag, int id, const _ns1__Certificacion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Certificacion), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:extCodSeguro", -1, &(a->_ns1__Certificacion::extCodSeguro), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:extRutBeneficiario", -1, &(a->_ns1__Certificacion::extRutBeneficiario), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:extRutPrestador", -1, &(a->_ns1__Certificacion::extRutPrestador), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extCodFinanciador", -1, &(a->_ns1__Certificacion::extCodFinanciador), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extCodLugar", -1, &(a->_ns1__Certificacion::extCodLugar), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:extNumOperacion", -1, &(a->_ns1__Certificacion::extNumOperacion), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ExtLisPrest1", -1, &(a->_ns1__Certificacion::ExtLisPrest1), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ExtLisPrest2", -1, &(a->_ns1__Certificacion::ExtLisPrest2), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ExtLisPrest3", -1, &(a->_ns1__Certificacion::ExtLisPrest3), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ExtLisPrest4", -1, &(a->_ns1__Certificacion::ExtLisPrest4), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ExtLisPrest5", -1, &(a->_ns1__Certificacion::ExtLisPrest5), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:ExtLisPrest6", -1, &(a->_ns1__Certificacion::ExtLisPrest6), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Certificacion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Certificacion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Certificacion * SOAP_FMAC4 soap_in__ns1__Certificacion(struct soap *soap, const char *tag, _ns1__Certificacion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Certificacion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Certificacion, sizeof(_ns1__Certificacion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Certificacion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Certificacion *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_extCodSeguro1 = 1;
	size_t soap_flag_extRutBeneficiario1 = 1;
	size_t soap_flag_extRutPrestador1 = 1;
	size_t soap_flag_extCodFinanciador1 = 1;
	size_t soap_flag_extCodLugar1 = 1;
	size_t soap_flag_extNumOperacion1 = 1;
	size_t soap_flag_ExtLisPrest11 = 1;
	size_t soap_flag_ExtLisPrest21 = 1;
	size_t soap_flag_ExtLisPrest31 = 1;
	size_t soap_flag_ExtLisPrest41 = 1;
	size_t soap_flag_ExtLisPrest51 = 1;
	size_t soap_flag_ExtLisPrest61 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_extCodSeguro1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extCodSeguro", &(a->_ns1__Certificacion::extCodSeguro), "xsd:int"))
				{	soap_flag_extCodSeguro1--;
					continue;
				}
			if (soap_flag_extRutBeneficiario1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:extRutBeneficiario", &(a->_ns1__Certificacion::extRutBeneficiario), "xsd:string"))
				{	soap_flag_extRutBeneficiario1--;
					continue;
				}
			if (soap_flag_extRutPrestador1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:extRutPrestador", &(a->_ns1__Certificacion::extRutPrestador), "xsd:string"))
				{	soap_flag_extRutPrestador1--;
					continue;
				}
			if (soap_flag_extCodFinanciador1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extCodFinanciador", &(a->_ns1__Certificacion::extCodFinanciador), "xsd:int"))
				{	soap_flag_extCodFinanciador1--;
					continue;
				}
			if (soap_flag_extCodLugar1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extCodLugar", &(a->_ns1__Certificacion::extCodLugar), "xsd:int"))
				{	soap_flag_extCodLugar1--;
					continue;
				}
			if (soap_flag_extNumOperacion1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:extNumOperacion", &(a->_ns1__Certificacion::extNumOperacion), "xsd:int"))
				{	soap_flag_extNumOperacion1--;
					continue;
				}
			if (soap_flag_ExtLisPrest11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ExtLisPrest1", &(a->_ns1__Certificacion::ExtLisPrest1), "xsd:string"))
				{	soap_flag_ExtLisPrest11--;
					continue;
				}
			if (soap_flag_ExtLisPrest21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ExtLisPrest2", &(a->_ns1__Certificacion::ExtLisPrest2), "xsd:string"))
				{	soap_flag_ExtLisPrest21--;
					continue;
				}
			if (soap_flag_ExtLisPrest31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ExtLisPrest3", &(a->_ns1__Certificacion::ExtLisPrest3), "xsd:string"))
				{	soap_flag_ExtLisPrest31--;
					continue;
				}
			if (soap_flag_ExtLisPrest41 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ExtLisPrest4", &(a->_ns1__Certificacion::ExtLisPrest4), "xsd:string"))
				{	soap_flag_ExtLisPrest41--;
					continue;
				}
			if (soap_flag_ExtLisPrest51 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ExtLisPrest5", &(a->_ns1__Certificacion::ExtLisPrest5), "xsd:string"))
				{	soap_flag_ExtLisPrest51--;
					continue;
				}
			if (soap_flag_ExtLisPrest61 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:ExtLisPrest6", &(a->_ns1__Certificacion::ExtLisPrest6), "xsd:string"))
				{	soap_flag_ExtLisPrest61--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Certificacion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Certificacion, 0, sizeof(_ns1__Certificacion), 0, soap_copy__ns1__Certificacion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_extCodSeguro1 > 0 || soap_flag_extCodFinanciador1 > 0 || soap_flag_extCodLugar1 > 0 || soap_flag_extNumOperacion1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__Certificacion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Certificacion);
	if (this->soap_out(soap, tag?tag:"ns1:Certificacion", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Certificacion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Certificacion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Certificacion * SOAP_FMAC4 soap_get__ns1__Certificacion(struct soap *soap, _ns1__Certificacion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Certificacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__Certificacion * SOAP_FMAC2 soap_instantiate__ns1__Certificacion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Certificacion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Certificacion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__Certificacion);
		if (size)
			*size = sizeof(_ns1__Certificacion);
		((_ns1__Certificacion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__Certificacion, n);
		if (size)
			*size = n * sizeof(_ns1__Certificacion);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__Certificacion*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__Certificacion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Certificacion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Certificacion %p -> %p\n", q, p));
	*(_ns1__Certificacion*)p = *(_ns1__Certificacion*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Conciliacion_(struct soap *soap, struct __ns1__Conciliacion_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Conciliacion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Conciliacion_(struct soap *soap, const struct __ns1__Conciliacion_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Conciliacion(soap, &a->ns1__Conciliacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Conciliacion_(struct soap *soap, const char *tag, int id, const struct __ns1__Conciliacion_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Conciliacion(soap, "ns1:Conciliacion", -1, &a->ns1__Conciliacion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Conciliacion_ * SOAP_FMAC4 soap_in___ns1__Conciliacion_(struct soap *soap, const char *tag, struct __ns1__Conciliacion_ *a, const char *type)
{
	size_t soap_flag_ns1__Conciliacion = 1;
	short soap_flag;
	a = (struct __ns1__Conciliacion_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Conciliacion_, sizeof(struct __ns1__Conciliacion_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Conciliacion_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Conciliacion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Conciliacion(soap, "ns1:Conciliacion", &a->ns1__Conciliacion, ""))
				{	soap_flag_ns1__Conciliacion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Conciliacion_(struct soap *soap, const struct __ns1__Conciliacion_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Conciliacion_(soap, tag?tag:"-ns1:Conciliacion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Conciliacion_ * SOAP_FMAC4 soap_get___ns1__Conciliacion_(struct soap *soap, struct __ns1__Conciliacion_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Conciliacion_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Conciliacion_ * SOAP_FMAC2 soap_instantiate___ns1__Conciliacion_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Conciliacion_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Conciliacion_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Conciliacion_);
		if (size)
			*size = sizeof(struct __ns1__Conciliacion_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Conciliacion_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Conciliacion_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Conciliacion_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Conciliacion_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Conciliacion_ %p -> %p\n", q, p));
	*(struct __ns1__Conciliacion_*)p = *(struct __ns1__Conciliacion_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Anulacion_(struct soap *soap, struct __ns1__Anulacion_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Anulacion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Anulacion_(struct soap *soap, const struct __ns1__Anulacion_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Anulacion(soap, &a->ns1__Anulacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Anulacion_(struct soap *soap, const char *tag, int id, const struct __ns1__Anulacion_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Anulacion(soap, "ns1:Anulacion", -1, &a->ns1__Anulacion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Anulacion_ * SOAP_FMAC4 soap_in___ns1__Anulacion_(struct soap *soap, const char *tag, struct __ns1__Anulacion_ *a, const char *type)
{
	size_t soap_flag_ns1__Anulacion = 1;
	short soap_flag;
	a = (struct __ns1__Anulacion_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Anulacion_, sizeof(struct __ns1__Anulacion_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Anulacion_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Anulacion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Anulacion(soap, "ns1:Anulacion", &a->ns1__Anulacion, ""))
				{	soap_flag_ns1__Anulacion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Anulacion_(struct soap *soap, const struct __ns1__Anulacion_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Anulacion_(soap, tag?tag:"-ns1:Anulacion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Anulacion_ * SOAP_FMAC4 soap_get___ns1__Anulacion_(struct soap *soap, struct __ns1__Anulacion_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Anulacion_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Anulacion_ * SOAP_FMAC2 soap_instantiate___ns1__Anulacion_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Anulacion_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Anulacion_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Anulacion_);
		if (size)
			*size = sizeof(struct __ns1__Anulacion_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Anulacion_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Anulacion_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Anulacion_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Anulacion_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Anulacion_ %p -> %p\n", q, p));
	*(struct __ns1__Anulacion_*)p = *(struct __ns1__Anulacion_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Confirmacion_(struct soap *soap, struct __ns1__Confirmacion_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Confirmacion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Confirmacion_(struct soap *soap, const struct __ns1__Confirmacion_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Confirmacion(soap, &a->ns1__Confirmacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Confirmacion_(struct soap *soap, const char *tag, int id, const struct __ns1__Confirmacion_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Confirmacion(soap, "ns1:Confirmacion", -1, &a->ns1__Confirmacion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Confirmacion_ * SOAP_FMAC4 soap_in___ns1__Confirmacion_(struct soap *soap, const char *tag, struct __ns1__Confirmacion_ *a, const char *type)
{
	size_t soap_flag_ns1__Confirmacion = 1;
	short soap_flag;
	a = (struct __ns1__Confirmacion_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Confirmacion_, sizeof(struct __ns1__Confirmacion_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Confirmacion_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Confirmacion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Confirmacion(soap, "ns1:Confirmacion", &a->ns1__Confirmacion, ""))
				{	soap_flag_ns1__Confirmacion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Confirmacion_(struct soap *soap, const struct __ns1__Confirmacion_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Confirmacion_(soap, tag?tag:"-ns1:Confirmacion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Confirmacion_ * SOAP_FMAC4 soap_get___ns1__Confirmacion_(struct soap *soap, struct __ns1__Confirmacion_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Confirmacion_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Confirmacion_ * SOAP_FMAC2 soap_instantiate___ns1__Confirmacion_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Confirmacion_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Confirmacion_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Confirmacion_);
		if (size)
			*size = sizeof(struct __ns1__Confirmacion_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Confirmacion_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Confirmacion_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Confirmacion_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Confirmacion_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Confirmacion_ %p -> %p\n", q, p));
	*(struct __ns1__Confirmacion_*)p = *(struct __ns1__Confirmacion_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Certificacion_(struct soap *soap, struct __ns1__Certificacion_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Certificacion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Certificacion_(struct soap *soap, const struct __ns1__Certificacion_ *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Certificacion(soap, &a->ns1__Certificacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Certificacion_(struct soap *soap, const char *tag, int id, const struct __ns1__Certificacion_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Certificacion(soap, "ns1:Certificacion", -1, &a->ns1__Certificacion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Certificacion_ * SOAP_FMAC4 soap_in___ns1__Certificacion_(struct soap *soap, const char *tag, struct __ns1__Certificacion_ *a, const char *type)
{
	size_t soap_flag_ns1__Certificacion = 1;
	short soap_flag;
	a = (struct __ns1__Certificacion_ *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Certificacion_, sizeof(struct __ns1__Certificacion_), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Certificacion_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Certificacion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Certificacion(soap, "ns1:Certificacion", &a->ns1__Certificacion, ""))
				{	soap_flag_ns1__Certificacion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Certificacion_(struct soap *soap, const struct __ns1__Certificacion_ *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Certificacion_(soap, tag?tag:"-ns1:Certificacion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Certificacion_ * SOAP_FMAC4 soap_get___ns1__Certificacion_(struct soap *soap, struct __ns1__Certificacion_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Certificacion_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Certificacion_ * SOAP_FMAC2 soap_instantiate___ns1__Certificacion_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Certificacion_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Certificacion_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Certificacion_);
		if (size)
			*size = sizeof(struct __ns1__Certificacion_);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Certificacion_, n);
		if (size)
			*size = n * sizeof(struct __ns1__Certificacion_);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Certificacion_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Certificacion_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Certificacion_ %p -> %p\n", q, p));
	*(struct __ns1__Certificacion_*)p = *(struct __ns1__Certificacion_*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Conciliacion(struct soap *soap, struct __ns1__Conciliacion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Conciliacion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Conciliacion(struct soap *soap, const struct __ns1__Conciliacion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Conciliacion(soap, &a->ns1__Conciliacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Conciliacion(struct soap *soap, const char *tag, int id, const struct __ns1__Conciliacion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Conciliacion(soap, "ns1:Conciliacion", -1, &a->ns1__Conciliacion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Conciliacion * SOAP_FMAC4 soap_in___ns1__Conciliacion(struct soap *soap, const char *tag, struct __ns1__Conciliacion *a, const char *type)
{
	size_t soap_flag_ns1__Conciliacion = 1;
	short soap_flag;
	a = (struct __ns1__Conciliacion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Conciliacion, sizeof(struct __ns1__Conciliacion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Conciliacion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Conciliacion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Conciliacion(soap, "ns1:Conciliacion", &a->ns1__Conciliacion, ""))
				{	soap_flag_ns1__Conciliacion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Conciliacion(struct soap *soap, const struct __ns1__Conciliacion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Conciliacion(soap, tag?tag:"-ns1:Conciliacion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Conciliacion * SOAP_FMAC4 soap_get___ns1__Conciliacion(struct soap *soap, struct __ns1__Conciliacion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Conciliacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Conciliacion * SOAP_FMAC2 soap_instantiate___ns1__Conciliacion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Conciliacion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Conciliacion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Conciliacion);
		if (size)
			*size = sizeof(struct __ns1__Conciliacion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Conciliacion, n);
		if (size)
			*size = n * sizeof(struct __ns1__Conciliacion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Conciliacion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Conciliacion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Conciliacion %p -> %p\n", q, p));
	*(struct __ns1__Conciliacion*)p = *(struct __ns1__Conciliacion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Anulacion(struct soap *soap, struct __ns1__Anulacion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Anulacion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Anulacion(struct soap *soap, const struct __ns1__Anulacion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Anulacion(soap, &a->ns1__Anulacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Anulacion(struct soap *soap, const char *tag, int id, const struct __ns1__Anulacion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Anulacion(soap, "ns1:Anulacion", -1, &a->ns1__Anulacion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Anulacion * SOAP_FMAC4 soap_in___ns1__Anulacion(struct soap *soap, const char *tag, struct __ns1__Anulacion *a, const char *type)
{
	size_t soap_flag_ns1__Anulacion = 1;
	short soap_flag;
	a = (struct __ns1__Anulacion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Anulacion, sizeof(struct __ns1__Anulacion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Anulacion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Anulacion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Anulacion(soap, "ns1:Anulacion", &a->ns1__Anulacion, ""))
				{	soap_flag_ns1__Anulacion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Anulacion(struct soap *soap, const struct __ns1__Anulacion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Anulacion(soap, tag?tag:"-ns1:Anulacion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Anulacion * SOAP_FMAC4 soap_get___ns1__Anulacion(struct soap *soap, struct __ns1__Anulacion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Anulacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Anulacion * SOAP_FMAC2 soap_instantiate___ns1__Anulacion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Anulacion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Anulacion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Anulacion);
		if (size)
			*size = sizeof(struct __ns1__Anulacion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Anulacion, n);
		if (size)
			*size = n * sizeof(struct __ns1__Anulacion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Anulacion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Anulacion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Anulacion %p -> %p\n", q, p));
	*(struct __ns1__Anulacion*)p = *(struct __ns1__Anulacion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Confirmacion(struct soap *soap, struct __ns1__Confirmacion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Confirmacion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Confirmacion(struct soap *soap, const struct __ns1__Confirmacion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Confirmacion(soap, &a->ns1__Confirmacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Confirmacion(struct soap *soap, const char *tag, int id, const struct __ns1__Confirmacion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Confirmacion(soap, "ns1:Confirmacion", -1, &a->ns1__Confirmacion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Confirmacion * SOAP_FMAC4 soap_in___ns1__Confirmacion(struct soap *soap, const char *tag, struct __ns1__Confirmacion *a, const char *type)
{
	size_t soap_flag_ns1__Confirmacion = 1;
	short soap_flag;
	a = (struct __ns1__Confirmacion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Confirmacion, sizeof(struct __ns1__Confirmacion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Confirmacion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Confirmacion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Confirmacion(soap, "ns1:Confirmacion", &a->ns1__Confirmacion, ""))
				{	soap_flag_ns1__Confirmacion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Confirmacion(struct soap *soap, const struct __ns1__Confirmacion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Confirmacion(soap, tag?tag:"-ns1:Confirmacion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Confirmacion * SOAP_FMAC4 soap_get___ns1__Confirmacion(struct soap *soap, struct __ns1__Confirmacion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Confirmacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Confirmacion * SOAP_FMAC2 soap_instantiate___ns1__Confirmacion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Confirmacion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Confirmacion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Confirmacion);
		if (size)
			*size = sizeof(struct __ns1__Confirmacion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Confirmacion, n);
		if (size)
			*size = n * sizeof(struct __ns1__Confirmacion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Confirmacion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Confirmacion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Confirmacion %p -> %p\n", q, p));
	*(struct __ns1__Confirmacion*)p = *(struct __ns1__Confirmacion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Certificacion(struct soap *soap, struct __ns1__Certificacion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Certificacion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Certificacion(struct soap *soap, const struct __ns1__Certificacion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Certificacion(soap, &a->ns1__Certificacion);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Certificacion(struct soap *soap, const char *tag, int id, const struct __ns1__Certificacion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_out_PointerTo_ns1__Certificacion(soap, "ns1:Certificacion", -1, &a->ns1__Certificacion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Certificacion * SOAP_FMAC4 soap_in___ns1__Certificacion(struct soap *soap, const char *tag, struct __ns1__Certificacion *a, const char *type)
{
	size_t soap_flag_ns1__Certificacion = 1;
	short soap_flag;
	a = (struct __ns1__Certificacion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Certificacion, sizeof(struct __ns1__Certificacion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Certificacion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Certificacion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Certificacion(soap, "ns1:Certificacion", &a->ns1__Certificacion, ""))
				{	soap_flag_ns1__Certificacion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Certificacion(struct soap *soap, const struct __ns1__Certificacion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Certificacion(soap, tag?tag:"-ns1:Certificacion", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Certificacion * SOAP_FMAC4 soap_get___ns1__Certificacion(struct soap *soap, struct __ns1__Certificacion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Certificacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Certificacion * SOAP_FMAC2 soap_instantiate___ns1__Certificacion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Certificacion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Certificacion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Certificacion);
		if (size)
			*size = sizeof(struct __ns1__Certificacion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct __ns1__Certificacion, n);
		if (size)
			*size = n * sizeof(struct __ns1__Certificacion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct __ns1__Certificacion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Certificacion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Certificacion %p -> %p\n", q, p));
	*(struct __ns1__Certificacion*)p = *(struct __ns1__Certificacion*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ConciliacionResponse(struct soap *soap, _ns1__ConciliacionResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ConciliacionResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ConciliacionResponse(struct soap *soap, const char *tag, int id, _ns1__ConciliacionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ConciliacionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ConciliacionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__ConciliacionResponse(struct soap *soap, const char *tag, _ns1__ConciliacionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ConciliacionResponse **)soap_malloc(soap, sizeof(_ns1__ConciliacionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ConciliacionResponse *)soap_instantiate__ns1__ConciliacionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ConciliacionResponse ** p = (_ns1__ConciliacionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ConciliacionResponse, sizeof(_ns1__ConciliacionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ConciliacionResponse(struct soap *soap, _ns1__ConciliacionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ConciliacionResponse);
	if (soap_out_PointerTo_ns1__ConciliacionResponse(soap, tag?tag:"ns1:ConciliacionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ConciliacionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__ConciliacionResponse(struct soap *soap, _ns1__ConciliacionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ConciliacionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Conciliacion(struct soap *soap, _ns1__Conciliacion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Conciliacion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Conciliacion(struct soap *soap, const char *tag, int id, _ns1__Conciliacion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Conciliacion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Conciliacion ** SOAP_FMAC4 soap_in_PointerTo_ns1__Conciliacion(struct soap *soap, const char *tag, _ns1__Conciliacion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Conciliacion **)soap_malloc(soap, sizeof(_ns1__Conciliacion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Conciliacion *)soap_instantiate__ns1__Conciliacion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Conciliacion ** p = (_ns1__Conciliacion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Conciliacion, sizeof(_ns1__Conciliacion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Conciliacion(struct soap *soap, _ns1__Conciliacion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Conciliacion);
	if (soap_out_PointerTo_ns1__Conciliacion(soap, tag?tag:"ns1:Conciliacion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Conciliacion ** SOAP_FMAC4 soap_get_PointerTo_ns1__Conciliacion(struct soap *soap, _ns1__Conciliacion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Conciliacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AnulacionResponse(struct soap *soap, _ns1__AnulacionResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AnulacionResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AnulacionResponse(struct soap *soap, const char *tag, int id, _ns1__AnulacionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AnulacionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AnulacionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__AnulacionResponse(struct soap *soap, const char *tag, _ns1__AnulacionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AnulacionResponse **)soap_malloc(soap, sizeof(_ns1__AnulacionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AnulacionResponse *)soap_instantiate__ns1__AnulacionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AnulacionResponse ** p = (_ns1__AnulacionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AnulacionResponse, sizeof(_ns1__AnulacionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AnulacionResponse(struct soap *soap, _ns1__AnulacionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__AnulacionResponse);
	if (soap_out_PointerTo_ns1__AnulacionResponse(soap, tag?tag:"ns1:AnulacionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AnulacionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__AnulacionResponse(struct soap *soap, _ns1__AnulacionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AnulacionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Anulacion(struct soap *soap, _ns1__Anulacion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Anulacion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Anulacion(struct soap *soap, const char *tag, int id, _ns1__Anulacion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Anulacion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Anulacion ** SOAP_FMAC4 soap_in_PointerTo_ns1__Anulacion(struct soap *soap, const char *tag, _ns1__Anulacion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Anulacion **)soap_malloc(soap, sizeof(_ns1__Anulacion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Anulacion *)soap_instantiate__ns1__Anulacion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Anulacion ** p = (_ns1__Anulacion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Anulacion, sizeof(_ns1__Anulacion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Anulacion(struct soap *soap, _ns1__Anulacion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Anulacion);
	if (soap_out_PointerTo_ns1__Anulacion(soap, tag?tag:"ns1:Anulacion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Anulacion ** SOAP_FMAC4 soap_get_PointerTo_ns1__Anulacion(struct soap *soap, _ns1__Anulacion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Anulacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ConfirmacionResponse(struct soap *soap, _ns1__ConfirmacionResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ConfirmacionResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ConfirmacionResponse(struct soap *soap, const char *tag, int id, _ns1__ConfirmacionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ConfirmacionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ConfirmacionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__ConfirmacionResponse(struct soap *soap, const char *tag, _ns1__ConfirmacionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ConfirmacionResponse **)soap_malloc(soap, sizeof(_ns1__ConfirmacionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ConfirmacionResponse *)soap_instantiate__ns1__ConfirmacionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ConfirmacionResponse ** p = (_ns1__ConfirmacionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ConfirmacionResponse, sizeof(_ns1__ConfirmacionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ConfirmacionResponse(struct soap *soap, _ns1__ConfirmacionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ConfirmacionResponse);
	if (soap_out_PointerTo_ns1__ConfirmacionResponse(soap, tag?tag:"ns1:ConfirmacionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ConfirmacionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__ConfirmacionResponse(struct soap *soap, _ns1__ConfirmacionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ConfirmacionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Confirmacion(struct soap *soap, _ns1__Confirmacion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Confirmacion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Confirmacion(struct soap *soap, const char *tag, int id, _ns1__Confirmacion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Confirmacion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Confirmacion ** SOAP_FMAC4 soap_in_PointerTo_ns1__Confirmacion(struct soap *soap, const char *tag, _ns1__Confirmacion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Confirmacion **)soap_malloc(soap, sizeof(_ns1__Confirmacion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Confirmacion *)soap_instantiate__ns1__Confirmacion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Confirmacion ** p = (_ns1__Confirmacion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Confirmacion, sizeof(_ns1__Confirmacion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Confirmacion(struct soap *soap, _ns1__Confirmacion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Confirmacion);
	if (soap_out_PointerTo_ns1__Confirmacion(soap, tag?tag:"ns1:Confirmacion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Confirmacion ** SOAP_FMAC4 soap_get_PointerTo_ns1__Confirmacion(struct soap *soap, _ns1__Confirmacion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Confirmacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CertificacionResponse(struct soap *soap, _ns1__CertificacionResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CertificacionResponse))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CertificacionResponse(struct soap *soap, const char *tag, int id, _ns1__CertificacionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CertificacionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CertificacionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CertificacionResponse(struct soap *soap, const char *tag, _ns1__CertificacionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CertificacionResponse **)soap_malloc(soap, sizeof(_ns1__CertificacionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CertificacionResponse *)soap_instantiate__ns1__CertificacionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CertificacionResponse ** p = (_ns1__CertificacionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CertificacionResponse, sizeof(_ns1__CertificacionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CertificacionResponse(struct soap *soap, _ns1__CertificacionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CertificacionResponse);
	if (soap_out_PointerTo_ns1__CertificacionResponse(soap, tag?tag:"ns1:CertificacionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CertificacionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CertificacionResponse(struct soap *soap, _ns1__CertificacionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CertificacionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Certificacion(struct soap *soap, _ns1__Certificacion *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Certificacion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Certificacion(struct soap *soap, const char *tag, int id, _ns1__Certificacion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Certificacion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Certificacion ** SOAP_FMAC4 soap_in_PointerTo_ns1__Certificacion(struct soap *soap, const char *tag, _ns1__Certificacion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Certificacion **)soap_malloc(soap, sizeof(_ns1__Certificacion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Certificacion *)soap_instantiate__ns1__Certificacion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Certificacion ** p = (_ns1__Certificacion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Certificacion, sizeof(_ns1__Certificacion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Certificacion(struct soap *soap, _ns1__Certificacion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Certificacion);
	if (soap_out_PointerTo_ns1__Certificacion(soap, tag?tag:"ns1:Certificacion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Certificacion ** SOAP_FMAC4 soap_get_PointerTo_ns1__Certificacion(struct soap *soap, _ns1__Certificacion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Certificacion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, _ns1__ConciliacionResponse_ConciliacionResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, const char *tag, int id, _ns1__ConciliacionResponse_ConciliacionResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ConciliacionResponse_ConciliacionResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, const char *tag, _ns1__ConciliacionResponse_ConciliacionResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ConciliacionResponse_ConciliacionResult **)soap_malloc(soap, sizeof(_ns1__ConciliacionResponse_ConciliacionResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ConciliacionResponse_ConciliacionResult *)soap_instantiate__ns1__ConciliacionResponse_ConciliacionResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ConciliacionResponse_ConciliacionResult ** p = (_ns1__ConciliacionResponse_ConciliacionResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ConciliacionResponse_ConciliacionResult, sizeof(_ns1__ConciliacionResponse_ConciliacionResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, _ns1__ConciliacionResponse_ConciliacionResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ConciliacionResponse_ConciliacionResult);
	if (soap_out_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(soap, tag?tag:"ns1:ConciliacionResponse-ConciliacionResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ConciliacionResponse_ConciliacionResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(struct soap *soap, _ns1__ConciliacionResponse_ConciliacionResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ConciliacionResponse_ConciliacionResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AnulacionResponse_AnulacionResult(struct soap *soap, _ns1__AnulacionResponse_AnulacionResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AnulacionResponse_AnulacionResult(struct soap *soap, const char *tag, int id, _ns1__AnulacionResponse_AnulacionResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AnulacionResponse_AnulacionResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__AnulacionResponse_AnulacionResult(struct soap *soap, const char *tag, _ns1__AnulacionResponse_AnulacionResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AnulacionResponse_AnulacionResult **)soap_malloc(soap, sizeof(_ns1__AnulacionResponse_AnulacionResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AnulacionResponse_AnulacionResult *)soap_instantiate__ns1__AnulacionResponse_AnulacionResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AnulacionResponse_AnulacionResult ** p = (_ns1__AnulacionResponse_AnulacionResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AnulacionResponse_AnulacionResult, sizeof(_ns1__AnulacionResponse_AnulacionResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AnulacionResponse_AnulacionResult(struct soap *soap, _ns1__AnulacionResponse_AnulacionResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__AnulacionResponse_AnulacionResult);
	if (soap_out_PointerTo_ns1__AnulacionResponse_AnulacionResult(soap, tag?tag:"ns1:AnulacionResponse-AnulacionResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__AnulacionResponse_AnulacionResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__AnulacionResponse_AnulacionResult(struct soap *soap, _ns1__AnulacionResponse_AnulacionResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AnulacionResponse_AnulacionResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, _ns1__ConfirmacionResponse_ConfirmacionResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, const char *tag, int id, _ns1__ConfirmacionResponse_ConfirmacionResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__ConfirmacionResponse_ConfirmacionResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, const char *tag, _ns1__ConfirmacionResponse_ConfirmacionResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__ConfirmacionResponse_ConfirmacionResult **)soap_malloc(soap, sizeof(_ns1__ConfirmacionResponse_ConfirmacionResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__ConfirmacionResponse_ConfirmacionResult *)soap_instantiate__ns1__ConfirmacionResponse_ConfirmacionResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__ConfirmacionResponse_ConfirmacionResult ** p = (_ns1__ConfirmacionResponse_ConfirmacionResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__ConfirmacionResponse_ConfirmacionResult, sizeof(_ns1__ConfirmacionResponse_ConfirmacionResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, _ns1__ConfirmacionResponse_ConfirmacionResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult);
	if (soap_out_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(soap, tag?tag:"ns1:ConfirmacionResponse-ConfirmacionResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__ConfirmacionResponse_ConfirmacionResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(struct soap *soap, _ns1__ConfirmacionResponse_ConfirmacionResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__ConfirmacionResponse_ConfirmacionResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CertificacionResponse_CertificacionResult(struct soap *soap, _ns1__CertificacionResponse_CertificacionResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CertificacionResponse_CertificacionResult(struct soap *soap, const char *tag, int id, _ns1__CertificacionResponse_CertificacionResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CertificacionResponse_CertificacionResult ** SOAP_FMAC4 soap_in_PointerTo_ns1__CertificacionResponse_CertificacionResult(struct soap *soap, const char *tag, _ns1__CertificacionResponse_CertificacionResult **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CertificacionResponse_CertificacionResult **)soap_malloc(soap, sizeof(_ns1__CertificacionResponse_CertificacionResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CertificacionResponse_CertificacionResult *)soap_instantiate__ns1__CertificacionResponse_CertificacionResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CertificacionResponse_CertificacionResult ** p = (_ns1__CertificacionResponse_CertificacionResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CertificacionResponse_CertificacionResult, sizeof(_ns1__CertificacionResponse_CertificacionResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CertificacionResponse_CertificacionResult(struct soap *soap, _ns1__CertificacionResponse_CertificacionResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CertificacionResponse_CertificacionResult);
	if (soap_out_PointerTo_ns1__CertificacionResponse_CertificacionResult(soap, tag?tag:"ns1:CertificacionResponse-CertificacionResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__CertificacionResponse_CertificacionResult ** SOAP_FMAC4 soap_get_PointerTo_ns1__CertificacionResponse_CertificacionResult(struct soap *soap, _ns1__CertificacionResponse_CertificacionResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CertificacionResponse_CertificacionResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
