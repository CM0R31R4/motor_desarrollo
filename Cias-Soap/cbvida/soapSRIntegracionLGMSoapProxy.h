/* soapSRIntegracionLGMSoapProxy.h
   Generated by gSOAP 2.8.14 from cbvida.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapSRIntegracionLGMSoapProxy_H
#define soapSRIntegracionLGMSoapProxy_H
#include "soapH.h"

class SOAP_CMAC SRIntegracionLGMSoapProxy
{ public:
	struct soap *soap;
	bool own;
	/// Endpoint URL of service 'SRIntegracionLGMSoapProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	SRIntegracionLGMSoapProxy();
	/// Constructor to use/share an engine state
	SRIntegracionLGMSoapProxy(struct soap*);
	/// Constructor with endpoint URL
	SRIntegracionLGMSoapProxy(const char *url);
	/// Constructor with engine input+output mode control
	SRIntegracionLGMSoapProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	SRIntegracionLGMSoapProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	SRIntegracionLGMSoapProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~SRIntegracionLGMSoapProxy();
	/// Initializer used by constructors
	virtual	void SRIntegracionLGMSoapProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Certificacion' (returns error code or SOAP_OK)
	virtual	int Certificacion(_ns1__Certificacion *ns1__Certificacion, _ns1__CertificacionResponse *ns1__CertificacionResponse) { return this->Certificacion(NULL, NULL, ns1__Certificacion, ns1__CertificacionResponse); }
	virtual	int Certificacion(const char *endpoint, const char *soap_action, _ns1__Certificacion *ns1__Certificacion, _ns1__CertificacionResponse *ns1__CertificacionResponse);

	/// Web service operation 'Confirmacion' (returns error code or SOAP_OK)
	virtual	int Confirmacion(_ns1__Confirmacion *ns1__Confirmacion, _ns1__ConfirmacionResponse *ns1__ConfirmacionResponse) { return this->Confirmacion(NULL, NULL, ns1__Confirmacion, ns1__ConfirmacionResponse); }
	virtual	int Confirmacion(const char *endpoint, const char *soap_action, _ns1__Confirmacion *ns1__Confirmacion, _ns1__ConfirmacionResponse *ns1__ConfirmacionResponse);

	/// Web service operation 'Anulacion' (returns error code or SOAP_OK)
	virtual	int Anulacion(_ns1__Anulacion *ns1__Anulacion, _ns1__AnulacionResponse *ns1__AnulacionResponse) { return this->Anulacion(NULL, NULL, ns1__Anulacion, ns1__AnulacionResponse); }
	virtual	int Anulacion(const char *endpoint, const char *soap_action, _ns1__Anulacion *ns1__Anulacion, _ns1__AnulacionResponse *ns1__AnulacionResponse);

	/// Web service operation 'Conciliacion' (returns error code or SOAP_OK)
	virtual	int Conciliacion(_ns1__Conciliacion *ns1__Conciliacion, _ns1__ConciliacionResponse *ns1__ConciliacionResponse) { return this->Conciliacion(NULL, NULL, ns1__Conciliacion, ns1__ConciliacionResponse); }
	virtual	int Conciliacion(const char *endpoint, const char *soap_action, _ns1__Conciliacion *ns1__Conciliacion, _ns1__ConciliacionResponse *ns1__ConciliacionResponse);

	/// Web service operation 'Certificacion' (returns error code or SOAP_OK)
	virtual	int Certificacion_(_ns1__Certificacion *ns1__Certificacion, _ns1__CertificacionResponse *ns1__CertificacionResponse) { return this->Certificacion_(NULL, NULL, ns1__Certificacion, ns1__CertificacionResponse); }
	virtual	int Certificacion_(const char *endpoint, const char *soap_action, _ns1__Certificacion *ns1__Certificacion, _ns1__CertificacionResponse *ns1__CertificacionResponse);

	/// Web service operation 'Confirmacion' (returns error code or SOAP_OK)
	virtual	int Confirmacion_(_ns1__Confirmacion *ns1__Confirmacion, _ns1__ConfirmacionResponse *ns1__ConfirmacionResponse) { return this->Confirmacion_(NULL, NULL, ns1__Confirmacion, ns1__ConfirmacionResponse); }
	virtual	int Confirmacion_(const char *endpoint, const char *soap_action, _ns1__Confirmacion *ns1__Confirmacion, _ns1__ConfirmacionResponse *ns1__ConfirmacionResponse);

	/// Web service operation 'Anulacion' (returns error code or SOAP_OK)
	virtual	int Anulacion_(_ns1__Anulacion *ns1__Anulacion, _ns1__AnulacionResponse *ns1__AnulacionResponse) { return this->Anulacion_(NULL, NULL, ns1__Anulacion, ns1__AnulacionResponse); }
	virtual	int Anulacion_(const char *endpoint, const char *soap_action, _ns1__Anulacion *ns1__Anulacion, _ns1__AnulacionResponse *ns1__AnulacionResponse);

	/// Web service operation 'Conciliacion' (returns error code or SOAP_OK)
	virtual	int Conciliacion_(_ns1__Conciliacion *ns1__Conciliacion, _ns1__ConciliacionResponse *ns1__ConciliacionResponse) { return this->Conciliacion_(NULL, NULL, ns1__Conciliacion, ns1__ConciliacionResponse); }
	virtual	int Conciliacion_(const char *endpoint, const char *soap_action, _ns1__Conciliacion *ns1__Conciliacion, _ns1__ConciliacionResponse *ns1__ConciliacionResponse);
};
#endif
